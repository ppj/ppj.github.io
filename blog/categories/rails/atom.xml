<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2014-10-14T00:26:30+11:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Additional Features for the PostIt App]]></title>
    <link href="http://ppj.github.io/blog/2014/10/13/some-additional-features-for-the-postit-app/"/>
    <updated>2014-10-13T14:30:40+11:00</updated>
    <id>http://ppj.github.io/blog/2014/10/13/some-additional-features-for-the-postit-app</id>
    <content type="html"><![CDATA[<p>Almost at the end of <a href="/2014/10/12/quiz-for-rails-beginners-3/">Lesson 3</a>, i decided to add a couple of additional features to my <a href="http://ppj-postit.herokuapp.com/">PostIt</a> web application i am developing as a part of the <a href="http://www.gotealeaf.com/curriculum#!rails">second course</a> at <a href="http://www.gotealeaf.com/">Tealeaf Academy</a></p>

<!-- more -->

<p>Here are the two features i have attempted to add:</p>

<ol>
<li><a href="#new_category">Creation Of A New Category On The Go</a></li>
<li><a href="#vote_deletion">Deletion Of A Vote</a></li>
</ol>

<p><a name='new_category'></a></p>

<h3 id="create-a-new-category-on-the-go">Create A New Category On The Go</h3>

<p>In the default application (as instructed in the course), the only way to create a new category was through the Categories dropdown button in the navigation bar as show in the image below:</p>

<p><center><img src="/images/dropdown_new_category.jpg" alt="Add new category"></center></p>

<p>This is not very helpful when a user would want to add a new category during creation of a new post. So, i added a new category creation form inside the Posts-new view template. But that meant making sure the validation on the category name fired from here without destroying the new post contents. This also necessitated the use of non-model backed form helpers (although Category is a model, the text-field to pass new category name is not in a Category model-backed form).</p>

<p>This helper in the Posts controller class helps to determine whether to create a new category or not:
<figure class='code'><figcaption><span>posts_controller.rb : create_new_category</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">def</span> <span class="nf">create_new_category</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if params[:new_category].strip.empty?</span>
</span><span class='line'><span class="sr">    false</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    category_names = Category.all.map(&amp;amp;:name)</span>
</span><span class='line'><span class="sr">    index = category_names.index(params[:new_category])</span>
</span><span class='line'><span class="sr">    if index</span>
</span><span class='line'><span class="sr">      @category = Category.find_by(name: category_names[index])</span>
</span><span class='line'><span class="sr">      @category.id</span>
</span><span class='line'><span class="sr">    else</span>
</span><span class='line'><span class="sr">      @category = Category.new(name: params[:new_category])</span>
</span><span class='line'><span class="sr">      if @category.save</span>
</span><span class='line'><span class="sr">        @category.id</span>
</span><span class='line'><span class="sr">      else</span>
</span><span class='line'><span class="sr">        false</span>
</span><span class='line'><span class="sr">      end</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The following code in the Posts#create uses the above helper:
<figure class='code'><figcaption><span>posts_controller.rb : create</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">category_index</span> <span class="o">=</span> <span class="n">create_new_category</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if category_index</span>
</span><span class='line'><span class="sr">  flash[:notice] = &amp;quot;Category &amp;amp; Post created successfully!&amp;quot;</span>
</span><span class='line'><span class="sr">  category_check_passed = true</span>
</span><span class='line'><span class="sr">elsif @category</span>
</span><span class='line'><span class="sr">  category_check_passed = @category.errors.empty?</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  category_check_passed = true</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">category_check_passed</span>
</span><span class='line'>  <span class="vi">@post</span><span class="o">.</span><span class="n">categories</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@category</span> <span class="k">if</span> <span class="n">category_index</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">||=</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="no">Post</span> <span class="n">created</span> <span class="n">successfully!</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="vi">@new_category</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:new_category</span><span class="o">]</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It is used in a similar way in the Posts#update action.</p>

<p>Here&#39;s how it looks in the create-new-post form now:
<center><img src="/images/new_category_blank.JPG" alt="New Category Blank"></center></p>

<p>If, new category creation fails:
<center><img src="/images/new_category_error.JPG" alt="New Category Error"></center></p>

<p>Here&#39;s the post after the validation passes:
<center><img src="/images/new_category_success.JPG" alt="New Category Success"></center></p>

<p><a name='vote_deletion'></a></p>

<h3 id="deletion-of-a-vote">Deletion Of A Vote</h3>

<p>One user cannot vote more than once on a post or a comment through this validation in the Votes model:
<code>validates_uniqueness_of :creator, scope: [:voteable_type, :voteable_id]</code></p>

<p>What if a user voted by mistake or changed his/her mind on a particular post or comment? Adding this capability meant that I needed to do primarily two things:
- If the logged in user has voted (up or down) on a particular item, show an icon to delete the vote instead of an icon to cast a vote (the thumbs-up or thumbs-down icon)
- The vote deletion icon should call an action to delete this user&#39;s vote on that item</p>

<p>I added these by writing one helper method for each &#39;voteable&#39; model, comment, and post. Shown below is the one for comment (the more complex of the two). The one for post is very similar.
<figure class='code'><figcaption><span>/app/helpers/application_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def link_based_on_current_users_vote_on_comment(comment_object, value)</span>
</span><span class='line'><span class="sr">    if Vote.find_by(creator: current_user, vote: value, voteable: comment_object)</span>
</span><span class='line'><span class="sr">      link_to vote_destroy_post_comment_path(comment_object.post, comment_object), method: &amp;#39;delete&amp;#39; do</span>
</span><span class='line'><span class="sr">        &amp;quot;&lt;i class=&#39;icon-fire&#39;&gt;&lt;/i</span><span class="o">&gt;&amp;</span><span class="n">quot</span><span class="p">;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">icon</span> <span class="o">=</span> <span class="n">value</span> <span class="p">?</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="o">&lt;</span><span class="n">i</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;icon-thumbs-up&#39;</span><span class="o">&gt;&lt;</span><span class="sr">/i&gt;&amp;quot; : &amp;quot;&lt;i class=&#39;icon-thumbs-down&#39;&gt;&lt;/i</span><span class="o">&gt;&amp;</span><span class="n">quot</span><span class="p">;</span>
</span><span class='line'>      <span class="n">link_to</span> <span class="n">vote_post_comment_path</span><span class="p">(</span><span class="n">comment_object</span><span class="o">.</span><span class="n">post</span><span class="p">,</span> <span class="n">comment_object</span><span class="p">,</span> <span class="ss">vote</span><span class="p">:</span> <span class="n">value</span><span class="p">),</span> <span class="nb">method</span><span class="p">:</span> <span class="o">&amp;</span><span class="c1">#39;post&amp;#39; do</span>
</span><span class='line'>        <span class="n">icon</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s2">&quot;text&quot;</span><span class="o">&gt;</span><span class="no">Using</span> <span class="n">this</span> <span class="n">helper</span> <span class="nb">method</span> <span class="k">in</span> <span class="n">the</span> <span class="n">view</span> <span class="n">template</span> <span class="n">is</span> <span class="n">illustrated</span> <span class="ss">below</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure> Ruby \_comments.html.erb
  &lt;% if logged_in? %&gt;
    &lt;%= link_based_on_current_users_vote_on_comment(comment, true) %&gt;
    &lt;br&gt;
  &lt;% end %&gt;
  &lt;%= &quot;&lt;strong&gt;#{comment.vote_count}&lt;/strong&gt; &lt;small&gt;(#{pluralize(comment.votes.size, &quot;Vote&quot;)})&lt;/small&gt;&quot;.html_safe %&gt;
  &lt;% if logged_in? %&gt;
    &lt;br&gt;
    &lt;%= link_based_on_current_users_vote_on_comment(comment, false) %&gt;
  &lt;% end %&gt;
</code></pre></div>
<p>The images below show the conditional rendering:</p>

<table><thead>
<tr>
<th style="text-align: center">When user has not voted on the item</th>
<th style="text-align: center">When the user has voted &#39;up&#39; an item</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center"><img src="/images/Votes_no_delete.jpg" alt="Vote Box No Delete"></td>
<td style="text-align: center"><img src="/images/Votes_with_delete.jpg" alt="Vote Box No Delete"></td>
</tr>
</tbody></table>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quiz for Rails Beginners 3]]></title>
    <link href="http://ppj.github.io/blog/2014/10/12/quiz-for-rails-beginners-3/"/>
    <updated>2014-10-12T16:22:01+11:00</updated>
    <id>http://ppj.github.io/blog/2014/10/12/quiz-for-rails-beginners-3</id>
    <content type="html"><![CDATA[<p>Here&#39;s the third quiz for people who are just getting started learning web-application development. 
This revisits the basics of MVC, implementing basic user-authentication and polymorphic associations.</p>

<!-- more -->

<ol>
<li><p><a name='q1'></a><a href="#a1">What&#39;s the difference between rendering and redirecting? What&#39;s the impact with regards to instance variables, view templates?</a></p></li>
<li><p><a name='q2'></a><a href="#a2">If I need to display a message on the view template, and I&#39;m redirecting, what&#39;s the easiest way to accomplish this?</a></p></li>
<li><p><a name='q3'></a><a href="#a3">If I need to display a message on the view template, and I&#39;m rendering, what&#39;s the easiest way to accomplish this?</a></p></li>
<li><p><a name='q4'></a><a href="#a4">Explain how we should save passwords to the database.</a></p></li>
<li><p><a name='q5'></a><a href="#a5">What should we do if we have a method that is used in both controllers and views?</a></p></li>
<li><p><a name='q6'></a><a href="#a6">What is memoization? How is it a performance optimization?</a></p></li>
<li><p><a name='q7'></a><a href="#a7">If we want to prevent unauthenticated users from creating a new comment on a post, what should we do?</a></p></li>
<li><p><a name='q8'></a><a href="#a8">Suppose we have the following table for tracking &quot;likes&quot; in our application. How can we make this table polymorphic? Note that the &quot;user_id&quot; foreign key is tracking who created the like.</a>  </p>

<table><thead>
<tr>
<th style="text-align: right">id</th>
<th style="text-align: center">user_id</th>
<th style="text-align: center">photo_id</th>
<th style="text-align: center">video_id</th>
<th style="text-align: center">post_id</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: right">1</td>
<td style="text-align: center">4</td>
<td style="text-align: center"></td>
<td style="text-align: center">12</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: right">2</td>
<td style="text-align: center">7</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center">3</td>
</tr>
<tr>
<td style="text-align: right">3</td>
<td style="text-align: center">2</td>
<td style="text-align: center">6</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
</tbody></table></li>
<li><p><a name='q9'></a><a href="#a9">How do we set up polymorphic associations at the model layer? Give example for the polymorphic model (eg, Vote) as well as an example parent model (the model on the 1 side, eg, Post).</a></p></li>
<li><p><a name='q10'></a><a href="#a10">What is an ERD diagram, and why do we need it?</a></p></li>
</ol>

<h3 id="my-answers:">MY ANSWERS:</h3>

<p><a name='a1'></a>
<strong>A1</strong>: Rendering a view template happens as (the final) part of a single HTTP request, whereas redirecting means end of a request and initiation a whole new request. And because of that, redirecting would not enable use of instance variables in the view templates unlike direct rendering.<br>
<a href="#q1">Back</a></p>

<p><a name='a2'></a>
<strong>A2</strong>: Using a hash referenced in the layout would be the easiest way to display messages if redirecting. For example:<br>
<code>flash[:notice] = &#39;You have successfully updated the profile&#39;</code>
<code>flash[:error] = &#39;The login credentials you entered are incorrect&#39;</code><br>
<a href="#q2">Back</a></p>

<p><a name='a3'></a>
<strong>A3</strong>: For generic messages, using the same hash as described in <a href="#a2">A2</a> above would work. If error messages on a model-object stored in an instance variable need to be displayed, that instance variable can be used directly in the view template using something like<br>
<code>ruby
&lt;% if model_obj.errors.any? %&gt;
  &lt;div class=&#39;row&#39;&gt;
    &lt;div class=&#39;alert alert-error span8&#39;&gt;
      &lt;h5&gt;Please fix the errors below to submit successfully:&lt;/h5&gt;
      &lt;ol&gt;
        &lt;% model_obj.errors.full_messages.each do |msg| %&gt;
          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
        &lt;% end %&gt;
      &lt;/ol&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code>
<a href="#q3">Back</a></p>

<p><a name='a4'></a>
<strong>A4</strong>: Passwords should definitely never be stored directly as strings in the database. They should be auto converted to complex strings (obfuscated) using a dedicated gem (like <strong>bcrypt-ruby</strong>). Such a gem can help obfuscate the user-entered password using the same mechanism to obfuscate the originally set password. Thus the comparison between the user entered and originally set password can happen indirectly through the obfuscated strings. This obfuscation is one-way, that means the stored string cannot be converted back to the actual password string.
In case of the bcrypt-ruby gem, the database table for the model needs to have a column named &#39;password_digest&#39; that can hold a string. The model itself needs to have the <code>has_secure_password</code> validation declared in its class-definition. bcrypt-ruby gives a method named <code>authenticate</code> for the model-object which can be used to match the user-entered password to the stored one.<br>
<a href="#q4">Back</a></p>

<p><a name='a5'></a>
<strong>A5</strong>: If a helper method defined in the ApplicationController class (which each of the controllers inherit from) needs to be used by both the views, and the controllers, the <code>helper_method</code> needs to be called in the ApplicationController class definition with the helper-method names passed to it as arguments (as <code>:symbol</code>s). So, a line like the one below in the ApplicationController class definition<br>
<code>helper_method :current_user, :logged_in?</code><br>
will allow the methods <code>current_user</code> and <code>logged_in?</code> to be used in both views and controllers. Note that a call to <code>helper_method</code> is not necessary if these only need to be used in the controllers.<br>
<a href="#q5">Back</a></p>

<p><a name='a6'></a>
<strong>A6</strong>: &#39;Memoization&#39; (a play on the word &#39;memoir&#39;) is an optimization technique used to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same operation is requested repeatedly.<br>
It can be implemented in Ruby using the operator <code>||=</code> to assign a value to an instance variable. This can be used effectively to store results from a repeated database query (which can be quite performance intensive). The statement below is &#39;memoization&#39; in action:<br>
<code>@current_user ||= User.find(session[:user_id]) if session[:user_id]</code><br>
If the <code>current_user</code> instance variable is already populated (say, from a previous call to this statement), the cached result will be returned and evaluation of the right side of the above expression will be avoided.<br>
<a href="#q6">Back</a></p>

<p><a name='a7'></a>
<strong>A7</strong>: The rendering and submission of new comment form (Comments#new and Comments#create actions) should be allowed only if a user is logged in. This can be achieved by a common helper method that checks whether a valid user is logged in. This method will be defined in the parent controller class ApplicationController. This method can be called in the Comments controller class using the <code>before_action</code> keyword which will trigger checking of a valid user before executing certain actions.
<code>before_action :logged_in?, only: [:new, :create]</code><br>
<a href="#q7">Back</a></p>

<p><a name='a8'></a>
<div class='no_extra_new_line'><strong>A8</strong>: The table below shows the polymorphic version of the one shown in the question:</div>
<table style='margin-left:2em'>
  <thead>
    <tr>
      <th style="text-align: right">id</th>
      <th style="text-align: center">user_id</th>
      <th style="text-align: center">likeable_type</th>
      <th style="text-align: center">likeable_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">1</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">Video</td>
      <td style="text-align: center">12</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">Post</td>
      <td style="text-align: center">3</td>
    </tr>
    <tr>
      <td style="text-align: right">3</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Photo</td>
      <td style="text-align: center">6</td>
    </tr>
  </tbody>
</table><br>
<a href="#q8">Back</a></p>

<p><a name='a9'></a>
<div class='no_extra_new_line'><strong>A9</strong>: The &#39;like&#39; model would look like this</div>
<code>Ruby like.rb
class Like &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :likeable, polymorphic: true
end
</code>
The User model (creator of the &#39;like&#39;s) will look like this<br>
<code>Ruby User.rb
class User &lt; ActiveRecord::Base
  has_many :photos
  has_many :videos
  has_many :posts
  has_many :likes
end
</code>
Finally, the &#39;likeable&#39;s: Photo, Video and Post models, are shown below<br>
<code>Ruby photo.rb
class Photo &lt; ActiveRecord::Base
  belongs_to :poster, foreign_key: &#39;user_id&#39;, class_name: &#39;User&#39;
  has_many :likes, as: :likeable
end
</code>
<code>Ruby video.rb
class Video &lt; ActiveRecord::Base
  belongs_to :poster, foreign_key: &#39;user_id&#39;, class_name: &#39;User&#39;
  has_many :likes, as: :likeable
end
</code>
<code>Ruby post.rb
class Post &lt; ActiveRecord::Base
  belongs_to :poster, foreign_key: &#39;user_id&#39;, class_name: &#39;User&#39;
  has_many :likes, as: :likeable
end
</code>
<a href="#q9">Back</a></p>

<p><a name='a10'></a>
<strong>A10</strong>: Entity Relationship Diagrams show individual ActiveRecord models and their association with each other. Individual models are represented as blocks and also show the columns that model&#39;s database table needs to have. These are really handy when we are setting up the database models and associations between them.<br>
See the ERD below for the PostIt application (Courtesy - Tealeaf Academy):
<img src="http://d3ncao0pifc37i.cloudfront.net/images/ERD_final.jpg" alt="Final ERD"><br>
<a href="#q10">Back</a></p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quiz for Rails Beginners 2]]></title>
    <link href="http://ppj.github.io/blog/2014/10/06/quiz-for-rails-beginners-2/"/>
    <updated>2014-10-06T13:49:13+11:00</updated>
    <id>http://ppj.github.io/blog/2014/10/06/quiz-for-rails-beginners-2</id>
    <content type="html"><![CDATA[<p>Here&#39;s the second quiz for people who are just getting started learning web-application development. This focuses more on the resources routes and related concepts in Rails.</p>

<!-- more -->

<p>Each question is a link pointing to my corresponding answer as i understand the concepts the today.</p>

<ol>
<li><p><a name='q1'></a><a href="#a1">Name all the 7 (or 8) routes exposed by the <code>resources</code> keyword in the <code>routes.rb</code> file. Also name the 4 named routes, and how the request is routed to the controller/action.</a></p></li>
<li><p><a name='q2'></a><a href="#a2">What is REST and how does it relate to the <code>resources</code> routes?</a></p></li>
<li><p><a name='q3'></a><a href="#a3">What&#39;s the major difference between model backed and non-model backed form helpers?</a></p></li>
<li><p><a name='q4'></a><a href="#a4">How does <code>form_for</code> know how to build the <code>&lt;form&gt;</code> element?</a></p></li>
<li><p><a name='q5'></a><a href="#a5">What&#39;s the general pattern we use in the actions that handle submission of model-backed forms (ie, the <code>create</code> and <code>update</code> actions)?</a></p></li>
<li><p><a name='q6'></a><a href="#a6">How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?</a></p></li>
<li><p><a name='q7'></a><a href="#a7">What are Rails helpers?</a></p></li>
<li><p><a name='q8'></a><a href="#a8">What are Rails partials?</a></p></li>
<li><p><a name='q9'></a><a href="#a9">When do we use partials vs helpers?</a></p></li>
<li><p><a name='q10'></a><a href="#a10">When do we use non-model backed forms?</a></p></li>
</ol>

<h3 id="my-answers:">MY ANSWERS:</h3>

<p><a name='a1'></a>
<strong>A1</strong>: Having <code>resources :dogs</code> in the block in the routes.rb file is going to give us the following routes</p>

<table><thead>
<tr>
<th>Prefix</th>
<th>Verb</th>
<th>URI Pattern</th>
<th>Controller#Action</th>
</tr>
</thead><tbody>
<tr>
<td>dogs</td>
<td>GET</td>
<td>/dogs(.:format)</td>
<td>dogs#index</td>
</tr>
<tr>
<td></td>
<td>POST</td>
<td>/dogs(.:format)</td>
<td>dogs#create</td>
</tr>
<tr>
<td>new_dog</td>
<td>GET</td>
<td>/dogs/new(.:format)</td>
<td>dogs#new</td>
</tr>
<tr>
<td>edit_dog</td>
<td>GET</td>
<td>/dogs/:id/edit(.:format)</td>
<td>dogs#edit</td>
</tr>
<tr>
<td>dog</td>
<td>GET</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#show</td>
</tr>
<tr>
<td></td>
<td>PATCH</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#update</td>
</tr>
<tr>
<td></td>
<td>PUT</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#update</td>
</tr>
<tr>
<td></td>
<td>DELETE</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#destroy</td>
</tr>
</tbody></table>

<p><a href="#q1">Back</a></p>

<p><a name='a2'></a>
<strong>A2</strong>: REST (<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer) is a way to maintain data persistence in <strong>stateless</strong> data-transfer protocol (which is HTTP in our case). The <code>resources</code> keyword in the routes.rb file creates the most used 7 routes (listed above) in a Rails application. These routes are RESTful because they conform to the <a href="http://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints">REST architectural constraints</a> for web application development. 
<a href="#q2">Back</a></p>

<p><a name='a3'></a>
<strong>A3</strong>: The major difference is a model-backed helper requires, and directly works on, a ActiveRecord Model object for creation of equivalent HTML tags. This is makes it very tightly integrated with the model object and it&#39;s attributes. A non-model backed helper is a more generic helper to create HTML tags and do not need any ActiveRecord Model object to work on.<br>
<a href="#q3">Back</a></p>

<p><a name='a4'></a>
<strong>A4</strong>: Because the <code>form_for</code> is a model-backed form helper, it takes an ActiveRecord Model object to create an HTML form for using the model object&#39;s real and virtual attributes.<br>
<a href="#q4">Back</a></p>

<p><a name='a5'></a>
<div><strong>A5</strong>: The general pattern we use in actions that handle model-backed form submission is:</div>
<ol>
  <li>Create/Update Model Object in Memory</li>
  <li>Try to save it in the database</li>
  <li>If the save succeeds, redirect to the relevant page (showing the saved item by itself or in a list)</li>
  <li>If the save fails, render the page that submitted the form again, with the error messages (stored on the in-memory object) displayed</li>
</ol>
The equivalent code for the <code>create</code> action of the Category controller would look like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@category</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">))</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if @category.save</span>
</span><span class='line'><span class="sr">    flash[:notice] = &amp;#39;New category created.&amp;#39;</span>
</span><span class='line'><span class="sr">    redirect_to categories_path</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    render :new</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;code&gt;</span>
</span><span class='line'><span class="sr">Slightly different from the `create` action, the `update` action would like like this:</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Ruby</span>
</span><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="vi">@category</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if @category.update(params.require(:category).permit(:name))</span>
</span><span class='line'><span class="sr">    flash[:notice] = &amp;#39;Category updated.&amp;#39;</span>
</span><span class='line'><span class="sr">    redirect_to category_path(@category)</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    render :edit</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure>
<a href="#q5">Back</a></p>

<p><a name='a6'></a>
<div><strong>A6</strong>:</div>
<ul class='no_extra_new_line'>
  <li>Model validations are triggered when the database is accessed for update, for example: the <code>save</code> or <code>create</code> methods are called on a model object</li>
  <li>f there are validation errors triggered during the above operation, they are saved on the model object itself which can be accessed by calling <code>#errors</code> on it</li>
  Note: model_obj.errors.full_messages can be used to retrieve an array of error messages
  <li>This object cab be saved in an instance variable of the controller class and then can be used in the rendered template to display errors as shown below</li>
</ul>
<code>Ruby
&lt;% if model_obj.errors.any? %&gt;
  &lt;div class=&#39;row&#39;&gt;
    &lt;div class=&#39;alert alert-error span8&#39;&gt;
      &lt;h5&gt;Please fix the errors below to submit successfully:&lt;/h5&gt;
      &lt;ol&gt;
        &lt;% model_obj.errors.full_messages.each do |msg| %&gt;
          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
        &lt;% end %&gt;
      &lt;/ol&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code>
<a href="#q6">Back</a></p>

<p><a name='a7'></a>
<strong>A7</strong>: Rails helpers are methods that can be defined to contain repetitive logic for the presentation layer (used by the view templates). These helper methods usually go in the <code>app\helpers\application_helper.rb</code> file under the Rails project folder.<br>
<a href="#q7">Back</a></p>

<p><a name='a8'></a>
<strong>A8</strong>: Rails partials are HTML snippets which need to be reused in many view templates with no or minimum modifications (that can be handled by arguments). Filenames for partials begin with an <code>_</code>, for example: <code>_errors.html.erb</code>. This partial can be used by calling the render method on it, as in <code>&lt;%= render &#39;shared/errors&#39;, model_obj: @post %&gt;</code> where <code>model_obj</code> is an argument variable name that will be used in the partial (refer to the HTML code in <a href="#a6">Answer 6</a> above).<br>
<a href="#q8">Back</a></p>

<p><a name='a9'></a>
<strong>A9</strong>: Partials should be preferred over helpers when too much HTML needs to be embedded. Helpers should be reserved more for the logic (parsing / reformating / calculations) than the presentation itself.<br>
<a href="#q9">Back</a></p>

<p><a name='a10'></a>
<strong>A10</strong>: Non-model backed form helpers should be used whenever user-input elements need to be generated for properties which are not the associated attributes of an ActiveRecord Model object.<br>
<a href="#q10">Back</a></p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Rails: RDBMS, Associations, Resources]]></title>
    <link href="http://ppj.github.io/blog/2014/09/25/getting-started-with-rails/"/>
    <updated>2014-09-25T14:27:22+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/25/getting-started-with-rails</id>
    <content type="html"><![CDATA[<p><a name='top'></a></p>

<div>Concepts covered in the first session of the <a href='http://www.gotealeaf.com/curriculum#!rails'>&#8216;Rapid Prototyping with Ruby on Rails&#8217;</a> course at <a href='http://www.gotealeaf.com/'>TeaLeaf Academy</a>:</div>

<ul>
<li><a href="#rdbms">Basics of Relational Databases</a></li>
<li><a href="#ar">ActiveRecord</a></li>
<li><a href="#mig">Migrations</a></li>
<li><a href="#assoc">Associations (1:M and M:M)</a></li>
<li><a href="#res">Resources</a></li>
</ul>

<!-- more -->

<p><a name='rdbms'></a>  </p>

<h3 class='no_extra_new_line'>Basics of Relational Databases</h3>

<ul>
<li>A single table in a relational db, in its simplest form, can be imagined to be like a spread-sheet (rows and columns)</li>
<li>Each column has a title (attribute) and can store only one predefined type of data (integer, string, boolean, &#8230;) and this is where it differs from a generic spreadsheet</li>
<li>Each row represents the data stored in the form of attribute values as per the columns</li>
<li>Each row is identified by a unique integer attribute called the &#39;primary_key&#39; of the table</li>
<li>There can be multiple (linked or unlinked) tables in the database, just like one file can have multiple spread-sheets</li>
<li>One table refers to the rows of one other table using an integer attribute called the &#39;foreign_key&#39; (see image below for illustration - Courtesy: <a href="http://publib.boulder.ibm.com">http://publib.boulder.ibm.com</a>)<br>
<img src="http://publib.boulder.ibm.com/infocenter/soliddb/v6r3/topic/com.ibm.swg.im.soliddb.sql.doc/figure/ReferentialConstraint.gif" alt="Courtesy: http://publib.boulder.ibm.com" title="Primary Key - Foreign Key"><br>
<strong>The CUST_ID is foreign key in Accounts table and primary key for the Customers table</strong></li>
<li>The foreign-key column is used to set up a 1-to-Many association between two tables (Foreign Key is on the &#39;Many&#39; table)</li>
<li>Rails offers SQLite3 as the default database (<a href="http://sqlitestudio.pl/">SQLiteStudio</a> is a good free viewer available for SQLite3 among many other free and paid ones)</li>
<li>A db table has two views

<ul>
<li><em>schema view</em>: shows the columns in each table and the type of data each column can store</li>
<li><em>data view</em>: shows the actual data in the table (much like the spread-sheet view)</li>
</ul></li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='ar'></a></p>

<h3 class='no_extra_new_line'>ActiveRecord</h3>

<ul>
<li>ActiveRecord is a pattern which helps abstract queries to the database through something called <strong>O</strong>bject <strong>R</strong>elational <strong>M</strong>apper (ORM)</li>
<li>ORM helps generate SQL queries using a Object#method syntax, for example (in Rails)

<ul>
<li>code like <code>Post.all</code> would generate an SQL query that looks like</li>
<li><code>SELECT &quot;posts&quot;.* FROM &quot;posts&quot;</code> which extracts all rows from the Post table in the database</li>
</ul></li>
<li>Each instance of an ActiveRecord Model object represents a row in the corresponding table</li>
<li>Each object has getter and setter methods for the real attributes (columns) as well as virtual attributes (created based on associations)</li>
<li>ActiveRecord in Rails is a thus a very simple, yet powerful (convenient) ORM implementation that saves lot of verbosity</li>
<li>Although not obvious to new web developers (like me :-)), but the simplicity of Rails ActiveRecord brings in a harsh limitation on Rails

<ul>
<li>the more complex the database(s) gets (big banks, hospitals, large corporations, etc.), the harder it is to translate code to SQL commands when data for one object spans over multiple tables across multiple linked databases</li>
<li>these large and complex databases need to be optimized for other aspects (for example, analytics) than just simple traversing</li>
</ul></li>
<li>See the image below (Courtesy: Tealeaf Academy) to get the basic idea of the implementation of ActiveRecord in Rails
<img src="http://d3ncao0pifc37i.cloudfront.net/images/ar_db_connection.jpg" alt="ActiveRecord in Rails" title="ActiveRecord in Rails"></li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='mig'></a></p>

<h3 class='no_extra_new_line'>Migrations</h3>

<ul>
<li>Migrations are modifications done to the database schema (additions, deletions, modifications of or to the individual tables in the database)</li>
<li>Migrations should be created using the <code>rails generate migrations new_migration_name</code> task (this is the only worthwhile use of the <code>rails generate</code> task)

<ul>
<li>the created migration file (Ruby) could be then modified manually to fine-tune the changes to be made to the schema </li>
</ul></li>
<li>Migrations should be effected using the <code>rake db:migrate</code> rake task

<ul>
<li>this will modify the schema.rb file to record the changes made to the schema (this file should be checked into the version control system)</li>
<li>this task will also make the implement the changes in the db (which is not checked in to the repository)</li>
</ul></li>
<li>see the <a href="http://guides.rubyonrails.org/migrations.html">Migrations documentation</a> for details</li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='assoc'></a></p>

<h3 class='no_extra_new_line'>Associations</h3>

<ul>
<li>1-to-Many (1:M) associations between two Models (each table in the db represents an ActiveRecord Model) can be set up using the foreign-key attribute</li>
<li>The model class for each entity needs to have the appropriate command that Rails provides to set up this association correctly (See the image below as an example - Courtesy: Tealeaf Academy)
<img src="http://d3ncao0pifc37i.cloudfront.net/images/1-M_association.png" alt="1:M Association Setup" title="1:M Association Setup"></li>
<li>Many-to-Many (M:M) associations are essentially two 1:M associations set up <strong>through</strong> an intermediary table, called the join-table</li>
<li>the preferred way to set up a M:M association is using a <code>has_many, through:</code> (hmt) method (see the diagram below - Courtesy: Tealeaf Academy)
<img src="http://d3ncao0pifc37i.cloudfront.net/images/M-M_association.png" alt="M:M Association Setup" title="M:M Association Setup"></li>
<li>the &#39;hmt&#39; method lets us have the join-table as an ActiveRecord Model, which means it can have additional attributes (like created_at if we want to keep track of how long the association exists between the two objects of the end models)</li>
<li>the non-preferred way to set up a M:M is with a <code>has_and_belongs_to_many</code> method</li>
<li>the &#39;habtm&#39; way needs a join-table too but does not give us a join-model, which limits the way we can use the join-table</li>
<li>see the <a href="http://guides.rubyonrails.org/association_basics.html">Associations Basics documentation</a> for details</li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='res'></a></p>

<h3 class='no_extra_new_line'>Resources</h3>

<ul>
<li>The routes.rb file defines all the routes the web application can take</li>
<li>Individual routes can be added to this file using the syntax <code>HTTP_METHOD &#39;/route&#39;, to: &#39;controller#action&#39;</code>

<ul>
<li><code>get &#39;/posts&#39;, to: &#39;posts#index&#39;</code> will set a route for a GET request to the /posts path to be handled by the Posts controller&#39;s <code>index</code> action</li>
</ul></li>
<li><div>The most common routes required for a controller named, say Posts, can be added by a single line of code in the routes.rb file</div>

<ul>
<li>just having <code>resources :posts</code> in the block in the routes.rb file is going to give the following routes</li>
</ul>

<table><thead>
<tr>
<th>Prefix</th>
<th>Verb</th>
<th>URI Pattern</th>
<th>Controller#Action</th>
</tr>
</thead><tbody>
<tr>
<td>posts</td>
<td>GET</td>
<td>/posts(.:format)</td>
<td>posts#index</td>
</tr>
<tr>
<td></td>
<td>POST</td>
<td>/posts(.:format)</td>
<td>posts#create</td>
</tr>
<tr>
<td>new_post</td>
<td>GET</td>
<td>/posts/new(.:format)</td>
<td>posts#new</td>
</tr>
<tr>
<td>edit_post</td>
<td>GET</td>
<td>/posts/:id/edit(.:format)</td>
<td>posts#edit</td>
</tr>
<tr>
<td>post</td>
<td>GET</td>
<td>/posts/:id(.:format)</td>
<td>posts#show</td>
</tr>
<tr>
<td></td>
<td>PATCH</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>PUT</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>DELETE</td>
<td>/posts/:id(.:format)</td>
<td>posts#destroy</td>
</tr>
</tbody></table></li>
<li><div>This can be customized by using the <code>except:</code> or <code>only:</code> options</div>

<ul>
<li><code>resources :posts, except: :destroy</code> would set all routes except the DELETE (last one in the list above)</li>
<li><code>resources :posts, only: [:index, :new, :create]</code> will set routes only for the first three actions in the list above</li>
</ul></li>
<li><p>See this <a href="http://guides.rubyonrails.org/routing.html">Rails Routing Guide page</a> for details</p></li>
</ul>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quiz for Rails Beginners 1]]></title>
    <link href="http://ppj.github.io/blog/2014/09/24/quiz-for-rails-beginners-1/"/>
    <updated>2014-09-24T11:56:38+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/24/quiz-for-rails-beginners-1</id>
    <content type="html"><![CDATA[<p>Here&#39;s a quiz for people who are just getting started learning web-application development. Most questions are specific to Rails, others are generic. Each question is a link pointing to my corresponding answer as i understand the concepts the today.</p>

<!-- more -->

<ol>
<li><p><a name='q1'></a><a href="#a1">Why do they call it a relational database?</a></p></li>
<li><p><a name='q2'></a><a href="#a2">What is SQL?</a></p></li>
<li><p><a name='q3'></a><a href="#a3">There are two predominant views into a relational database. What are they, and how are they different?</a></p></li>
<li><p><a name='q4'></a><a href="#a4">In a table, what do we call the column that serves as the main identifier for a row of data? We&#39;re looking for the general database term, not the column name.</a></p></li>
<li><p><a name='q5'></a><a href="#a5">What is a foreign key, and how is it used?</a></p></li>
<li><p><a name='q6'></a><a href="#a6">At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.</a></p></li>
<li><p><a name='q7'></a><a href="#a7">If there&#39;s an ActiveRecord model called &quot;CrazyMonkey&quot;, what should the table name be?</a></p></li>
<li><p><a name='q8'></a><a href="#a8">If I&#39;m building a 1:M association between Project and Issue, what will the model associations and foreign key be?</a></p></li>
<li><p><a name='q9'></a><div class='no_extra_line'>Given this code</div>
<code>Ruby
class Zoo &lt; ActiveRecord::Base
has_many :animals
end
</code></p>

<ul>
<li><a href="#a9">What do you expect the other model to be and what does database schema look like?</a></li>
<li><a href="#a9.2">What are the methods that are now available to a zoo to call related to animals?</a></li>
<li><a href="#a9.3">How do I create an animal called &quot;jumpster&quot; in a zoo called &quot;San Diego Zoo&quot;?</a>
<br/><br/></li>
</ul></li>
<li><p><a name='q10'></a><a href="#a10">What is mass assignment? What&#39;s the non-mass assignment way of setting values?</a></p></li>
<li><p><a name='q11'></a><a href="#a11">What does this code do?</a> <code>Animal.first</code></p></li>
<li><p><a name='q12'></a><a href="#a12">If I have a table called &quot;animals&quot; with columns called &quot;name&quot;, and a model called Animal, how do I instantiate an animal object with name set to &quot;Joe&quot;. Which methods makes sure it saves to the database?</a></p></li>
<li><p><a name='q13'></a><a href="#a13">How does a M:M association work at the database level?</a></p></li>
<li><p><a name='q14'></a><a href="#a14">What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?</a></p></li>
<li><p><a name='q15'></a><a href="#a15">Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?</a></p></li>
</ol>

<h3 id="my-answers:">MY ANSWERS:</h3>

<p><a name='a1'></a>
<strong>A1</strong>: The way data is represented in tuples (ordered list or array) of attribute-values that are grouped in a <a href="http://en.wikipedia.org/wiki/Relation_(database)">relation</a> (tuple with attribute/title/header) makes this database a relational database. <a href="http://en.wikipedia.org/wiki/Relational_model">Source</a><br>
<a href="#q1">Back</a></p>

<p><a name='a2'></a>
<strong>A2</strong>: Structured Query Language is a language to create, read, update, and destroy information in a Relational Database.<br>
<a href="#q2">Back</a></p>

<p><a name='a3'></a>
<div><strong>A3</strong>:</div>
<ul><li> The <strong>schema view</strong> shows what columns are in a table and what type of data (string/integer/boolean/&#8230;) each columns can store</li>
<li> The <strong>data view</strong> shows the actual table with the data that is currently stored in it (like a spreadsheet view)</li></ul>
<a href="#q3">Back</a></p>

<p><a name='a4'></a>
<strong>A4</strong>: Primary Key<br>
<a href="#q4">Back</a></p>

<p><a name='a5'></a>
<strong>A5</strong>: Foreign key is an index stored in one table that refers to the row index (primary key) of another table.<br>
<a href="#q5">Back</a></p>

<p><a name='a6'></a>
<strong>A6</strong>: Active Record pattern is an approach to accessing data in a database. Typical operations it helps perform on the database are inserting, updating and deleting data. <a href="http://www.martinfowler.com/eaaCatalog/activeRecord.html">Reference</a><br>
<a href="#q6">Back</a></p>

<p><a name='a7'></a>
<strong>A7</strong>: crazy_monkeys<br>
<a href="#q7">Back</a></p>

<p><a name='a8'></a>
<strong>A8</strong>:
<code>Ruby Project Model
class Project &lt; ActiveRecord::Base
  has_many :issues
end
</code>
<code>Ruby Issue Model
class Issue &lt; ActiveRecord::Base
  belongs_to :project
end
</code></p>

<p>Foreign Key: <code>project_id</code></p>

<p><a href="#q8">Back</a></p>

<p><a name='a9'></a>
<div><strong>A9</strong>:</div></p>

<p><strong>The Animal Model and Schemas</strong>
<code>Ruby Animal Model
class Animal &lt; ActiveRecord::Base
  belongs_to :zoo
end
</code></p>

<div>The Zoo table schema:</div>

<ul>
<li><code>id</code> (integer, primary_key, unique)</li>
<li><code>name</code> (string)</li>
</ul>

<div>The Animal table schema:</div>

<ul>
<li><code>id</code> (integer, primary_key, unique)</li>
<li><code>name</code>/<code>species</code> (string)</li>
<li><code>zoo_id</code> (integer, foreign_key)</li>
</ul>

<p><a name='a9.2'></a></p>

<div><strong>Methods available to a &#8216;zoo&#8217; object to call related to animals</strong>:</div>  

<ul>
<li><code>animals</code></li>
<li><code>animals &lt;&lt; animal_object</code></li>
<li><code>animals.delete(object, ...)</code></li>
<li><code>animals.destroy(object, ...)</code></li>
<li><code>animals=animal_objects</code></li>
<li><code>animal_ids</code></li>
<li><code>animal_ids=ids</code></li>
<li><code>animals.clear</code></li>
<li><code>animals.empty?</code></li>
<li><code>animals.size</code></li>
<li><code>animals.find(...)</code></li>
<li><code>animals.where(...)</code></li>
<li><code>animals.exists?(...)</code></li>
<li><code>animals.build(attributes = {}, ...)</code></li>
<li><code>animals.create(attributes = {})</code></li>
<li><code>animals.create!(attributes = {})</code></li>
</ul>

<p><a name='a9.3'></a></p>

<div><strong>To create an animal called &#8220;jumpster&#8221; in a zoo called &#8220;San Diego Zoo&#8221;</strong>:</div>  

<p><code>Ruby Rails Console
zoo=Zoo.find_by(name: &quot;San Diego Zoo&quot;)
zoo.animals &lt;&lt; Animal.create(name: &quot;jumpster&quot;)
</code>
<a href="#q9">Back</a></p>

<p><a name='a10'></a>
<div><strong>A10</strong>:</div>
<ul><li> Mass assignment - <code>Animal.create(name: &#39;tiger&#39;, zoo_id: &#39;3&#39;)</code></li>
<li> Non-mass assignment -
<code>Ruby
a = Animal.create()
a.name = &#39;tiger&#39;
a.zoo_id = 3
</code></li></ul>
<a href="#q10">Back</a></p>

<p><a name='a11'></a>
<strong>A11</strong>: It will fetch the first defined object (row) in the <code>animals</code> table in the database<br>
<a href="#q11">Back</a></p>

<p><a name='a12'></a>
<div><strong>A12</strong>:</div>
<ul><li> <code>Animal.create(name: &#39;Joe&#39;)</code></li>
<li> <code>Animal.create!(name: &#39;Joe&#39;)</code></li></ul>
<a href="#q12">Back</a></p>

<p><a name='a13'></a>
<strong>A13</strong>: It works through a join table which has attributes to store foreign keys (IDs) of the two tables it joins.<br>
<a href="#q13">Back</a></p>

<p><a name='a14'></a>
<div><strong>A14</strong>:</div>
<ul><li> <code>has_many, :through</code> (hmt)
  <ul><li> Pro: Join medium is a model (can have additional attributes)</li></ul></li>
<li> <code>has_and_belongs_to_many</code> (habtm)
  <ul><li> Con: Only Join-Table, no Join-Model so cannot have custom attributes (as against the &#39;Pro&#39; for &#39;hmt&#39; type association)</li></ul></li></ul>
<a href="#q14">Back</a></p>

<p><a name='a15'></a>
<div><strong>A15</strong>:</div>
<code>Ruby Rails Console
user  = User.find(1)
group = Group.find(1)
user.group &lt;&lt; group
</code>
<a href="#q15">Back</a></p>
]]></content>
  </entry>
  
</feed>
