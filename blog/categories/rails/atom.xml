<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2015-06-03T16:46:24+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Takeaways From Course 3 - Part 3]]></title>
    <link href="http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-3/"/>
    <updated>2015-06-03T15:48:12+10:00</updated>
    <id>http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-3</id>
    <content type="html"><![CDATA[<p>These are some key takeaways from the <a href="http://www.gotealeaf.com/curriculum#!production-apps">3rd course</a> for me based on the curriculum as well as the feedback received from the TAs for every module (aka Week).</p>

<div class="no_extra_new_line">In Module 4, focus was on learning&#8230;</div>

<ul>
<li>self-referential associations (a user following another user)</li>
<li>ActionMailer: sending emails</li>
<li>token generation for password reseting</li>
</ul>

<!--more-->

<div class="no_extra_new_line">This week i was reminded of some basics again (which i had forgotten!). Primarily:</div>

<ul>
<li>Avoid rendering from a POST request unless there&#8217;s an error.</li>
<li>Try to keep the test setup close to the action and assertion (double check the use of <code>let</code> and <code>before</code> after writing specs). This helps in readability of the specs.</li>
<li>Single-Assertion Principle (more of a guideline than a law): Avoid unrelated assertions in a single spec.</li>
<li>Name the shared_examples well enough to be understood clearly.
<li>Use <code>flash.now["alert message"]</code> for <code>render</code>ing instead of <code>flash["alert message"]</code>. The latter carries over to the next request which is why it is used with <code>redirect_to</code> - a new request.
</ul>

<div class="no_extra_new_line">Other tips i appreciated in my code review were:</div>

<ul>
<li>Use <code>pluck</code> instead of <code>map</code> for performance. <code>pluck</code> pulls only the ids from the database and loads the data into an array. It saves a lot of processing time and power over loading every record into memory using <code>map</code>. However, <a href="http://6ftdan.com/allyourdev/2015/05/13/rails-dont-pluck-unnecessarily">Here&#8217;s an article</a> that talks about when <code>pluck</code> is unnecessary.</li>
<li>For efficient single-record search, use <code>find_by(attribute: value)</code> than the fancy <code>find_by_attribute(value)</code>, which goes through <code>method_missing</code>, and doesn&#8217;t even save much typing!</li>
<li>Avoid writing migrations for populating data. Write a <a href="http://guides.rubyonrails.org/command_line.html#custom-rakek">custom rake task</a> under &#8216;lib/tasks&#8217; instead.</li>
<li>Clear ActionMailer deliveries using <code>ActionMailer::Base.deliveries.clear</code> in <code>before</code> or <code>after</code> hooks instead of in a particular spec to ensure their purging.
</ul>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Takeaways From Course 3 Part 2]]></title>
    <link href="http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-2/"/>
    <updated>2015-06-03T12:59:46+10:00</updated>
    <id>http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-2</id>
    <content type="html"><![CDATA[<p>These are some key takeaways from the <a href="http://www.gotealeaf.com/curriculum#!production-apps">3rd course</a> for me based on the curriculum as well as the feedback received from the TAs for every module (aka Week).</p>

<div class="no_extra_new_line">In Module 3, focus was on learning&#8230;</div>

<ul>
<li>to keep controllers skinny</li>
<li>ActiveRecord transactions (all or none!)</li>
<li>RSpec macros and shared_examples</li>
<li>Capybara introduction and first feature spec</li>
</ul>

<!--more-->

<h3 id="module-3">Module 3</h3>

<ul>
<li>Outside-in development in action with feature-specs in Capybara: Starting with a feature-spec (BDD) and letting it drive the design (models/routes/controllers) seems to be coming a bit more naturally to me than the other way round</li>
<li>Single-Assertion Principle can (and should) be violated in feature-specs: not just to DRY up the code, but mainly because feature specs are expensive to run!</li>
<li>ActiveRecord transactions was one of the primary learnings when trying to update the video positions in the queue. Got introduced to <a href="http://en.wikipedia.org/wiki/ACID">ACID</a>, thanks to the missus!</li>
<li>RSpec shared_examples and macros are very helpful in DRYing up the specs.</li>
<li>Got re-exposed to :xpath based search of elements in the view template! DOM tree, XPath, had heard and read about these a long time ago for some thing totally different!</li>
</ul>

<h4 id="finer-points:">Finer points:</h4>

<ul>
<li><code>QueueItem.find_by(id: params[:id], user: current_user)</code>
does not throw a &#8220;RecordNotFound&#8221; exception in rails. Doing this <code>current_user.queue_items.find(params[:id])</code> does. Use either knowingly!</li>
<li>Do not prefix method names with <code>get_</code> or <code>set_</code>. Instead come up with better names to indicate what they do.</li>
<li>Use <code>method: delete</code> instead of the default <code>get</code> for destroying a record so that the route cannot be bookmarked.</li>
<li>Use <code>find_by</code> instead of <code>where(...).first</code> for searching a single record.</li>
<li>Prefix <code>self.</code> when assigning value to an instance variable but it is not necessary when using the variable in an instance method.</li>
</ul>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Takeaways From Course 3 - Part 1]]></title>
    <link href="http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-1/"/>
    <updated>2015-06-03T10:55:35+10:00</updated>
    <id>http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-1</id>
    <content type="html"><![CDATA[<p>These are some key takeaways from the <a href="http://www.gotealeaf.com/curriculum#!production-apps">3rd course</a> for me based on the reviews i received from the TAs for every module (aka Week).</p>

<p>This is my beginner-TDD phase, so a lot these pertain to that in general and RSpec in specific(!), since that is what will be used in the course as the testing framework.</p>

<!--more-->

<h3 id="module-1">Module 1</h3>

<ul>
<li>Show success or failure flash-messages when handling post requests to notify the user</li>
<li>Standard validations on a models attribute can be written in a single line, like this:<br>
<code>validates :email, length: {minimum: 5}, uniqueness: true</code>
Whether it should be done or not depends on how much it affects readability</li>
<li>Why (it used to be necessary to) end a file with a blank line? <a href="http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline">Read here</a>.</li>
</ul>

<h3 id="module-2">Module 2</h3>

<ul>
<li>As a beginner-TDDer,

<ol>
<li>Start putting stuff in views assuming public interfaces of classes/models and Controller#actions. And then get into writing failing tests (first functional/controller and then unit/model).*</li>
<li>Write spec titles for as many scenarios as you can think of starting with the most obvious ones through to edge cases, <em>without over-analyzing it</em> (you can always add more tests!).</li>
<li>Start the red-green-refactor cycle in the same order.<br></li>
<li>Do not test the code you do not own. For example, whether a <code>GET</code> request to <code>books#index</code> renders the &quot;books/index.html.haml&quot; template. That is pretty much Rails&#39; responsibility!<br></li>
</ol></li>
<li>Make sure the test setup is not too far from the action and assertion in a spec. This tends to happen when using <code>let</code>, <code>let!</code>, <code>before</code> in RSpec.<br></li>
<li>Loved the use of the <a href="http://www.fabricationgem.org/">Fabrication</a> and <a href="https://github.com/stympy/faker">Faker</a> gems in generating test data!<br></li>
</ul>

<p>* <strong>Let BDD drive TDD</strong>: Outside-in development comes more naturally to me. <a href="http://webuild.envato.com/blog/making-the-most-of-bdd-part-1/">Here&#39;s a great article</a> about this approach.</p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Note About Creating an Associated Model]]></title>
    <link href="http://ppj.github.io/blog/2015/02/25/a-note-about-creating-an-associated-model/"/>
    <updated>2015-02-25T00:09:06+11:00</updated>
    <id>http://ppj.github.io/blog/2015/02/25/a-note-about-creating-an-associated-model</id>
    <content type="html"><![CDATA[<p>For a Review model which <code>belongs_to</code> a Video (Video <code>has_many :reviews</code>), there are a few ways to create a new Review associated to a Video. Two of which are:</p>

<!-- more -->

<p>Given <code>test_video = Video.create(...) # attributes for video omitted</code></p>

<ol>
<li><code>Review.create(video: test_video, ...) # other attributes for review omitted</code>, or</li>
<li><code>test_video.reviews.create(...) # attributes for review omitted</code></li>
</ol>

<p>Here are the Review and Video models for reference:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Video &lt; ActiveRecord::Base
  # irrelevant stuff omitted
  before_validation :update_rating!

  has_many :reviews

  private

  def update_rating!
    # update the video&#39;s average rating based on it&#39;s reviews&#39; ratings
  end
end
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">class Review &lt; ActiveRecord::Base
  after_save :update_video_rating!

  # irrelevant stuff omitted
  belongs_to :video

  private

  def update_video_rating!
    video.save if video
  end
end
</code></pre></div>
<p>The difference between the two methods to create the Review became obvious because i had the following in the test for the Review model:
<code>ruby
expect(test_video).to receive(:update_rating!).with(no_args)
Review.create( ..., video: test_video)
</code></p>

<p>The above test wouldn&#39;t pass because when the Review instance is created this way, the test_video instance in the test has a different memory location from the one which received the <code>update_rating!</code> call through the Review model <code>after_save :update_video_rating</code> callback.</p>

<p>When the Review instance is created using the 2nd way shown above, the same test passes because now the Video instance that receives the <code>update_rating!</code> call doesn&#39;t change.</p>

<p>However, i think i would still rewrite the expectation to accommodate for both calls this way:
<code>expect_any_instance_of(Video).to receive(:update_rating!).with(no_args)</code></p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRY Up Example With Modules and Gem Creation]]></title>
    <link href="http://ppj.github.io/blog/2014/10/21/dry-up-example-with-modules-and-gem-creation/"/>
    <updated>2014-10-21T16:42:46+11:00</updated>
    <id>http://ppj.github.io/blog/2014/10/21/dry-up-example-with-modules-and-gem-creation</id>
    <content type="html"><![CDATA[<p>Almost all the code enabling voting for the Posts and Comments in the PostIt app is common. Its original implementation screamed <strong>D</strong>on&#39;t <strong>R</strong>epeat <strong>Y</strong>ourself, or, in short <strong>DRY</strong>.</p>

<!-- more -->

<p>The same thing is true for the slug-generation and use functionality as well. The slug code is repeated for not two, but three models, namely Post, Category and User. DRYing up the slug code however represents one small challenge as compared to the voting code: slugs are generated from different attributes in each model, <code>:title</code> for Post, <code>:username</code> for User, and <code>:name</code> for Category.</p>

<p>This adds a degree of complexity to how the slug code can be DRYed, and that&#39;s why, this article uses slug as the example to explain the process. Voting DRYing up is not just similar, but much simpler.</p>

<ol>
<li><a name='modt'></a><a href="#mod">DRYing with Modules</a></li>
<li><a name='gemt'></a><a href="#gem">DRYing with Gems</a></li>
</ol>

<p><a name='mod'></a></p>

<h3 id="1.-&#39;dry&#39;ing-up-code-with-modules">1. &#39;DRY&#39;ing up code with Modules</h3>

<p>For the application to load modules from a common location (./lib), the following line needs to be added to ./config/application.rb under the Application class definition:
<code>config.autoload_paths += %W(#{config.root}/lib)</code></p>

<p>The above creates an array with application_root/lib path in a string format and adds it to the pre-existing array stored in <code>PostitTemplate::Application.config.autoload_paths</code>. This will ensure that all files stored in the ./lib folder will be automatically loaded at application startup.</p>

<p>Slugable.rb stored in this path will be populated by cutting the slug related code from any of the models that implements it (Post, Category, or User). In addition to that, the module file has a call to <code>extend ActiveSupport::Concern</code>. This enables some extra features like capability to add Class methods to the including class and the <code>included</code> hook to let some code to be executed only at the inclusion time. </p>

<p>Shown below is the above implemented for the slugging code, which is also repeated in the User, Post and Category models.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Slugable</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">class_attribute</span> <span class="ss">:slug_column</span>
    <span class="n">before_save</span> <span class="ss">:generate_slug!</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">ClassMethods</span>
    <span class="k">def</span> <span class="nf">set_slug_column_to</span><span class="p">(</span><span class="n">column</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">slug_column</span> <span class="o">=</span> <span class="n">column</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">to_param</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">slug</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">generate_slug!</span>
    <span class="n">the_slug</span> <span class="o">=</span> <span class="n">to_slug</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">slug_column</span><span class="p">))</span>
    <span class="n">model</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span>

    <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">record</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">find_by</span> <span class="ss">slug</span><span class="p">:</span> <span class="n">the_slug</span>
    <span class="k">while</span> <span class="n">record</span> <span class="ow">and</span> <span class="n">record</span> <span class="o">!=</span> <span class="nb">self</span>
      <span class="n">the_slug</span> <span class="o">=</span> <span class="n">make_unique</span><span class="p">(</span><span class="n">the_slug</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
      <span class="n">record</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">find_by</span> <span class="ss">slug</span><span class="p">:</span> <span class="n">the_slug</span>
      <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="nb">self</span><span class="o">.</span><span class="n">slug</span> <span class="o">=</span> <span class="n">the_slug</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">to_slug</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>                <span class="c1"># str=&quot; @#$@ My First @#2@%#@ Post!!  &quot;</span>
    <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">strip</span>               <span class="c1">#  --&gt;&quot;@#$@ My First @#2@%#@ Post!!&quot;</span>
    <span class="n">str</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/[^A-Za-z0-9]/</span><span class="p">,</span><span class="s1">&#39;-&#39;</span><span class="p">)</span> <span class="c1">#  --&gt;&quot;-----My-First---2-----Post--&quot;</span>
    <span class="n">str</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/-+/</span><span class="p">,</span><span class="s1">&#39;-&#39;</span><span class="p">)</span>           <span class="c1">#  --&gt;&quot;-My-First-2-Post-&quot;</span>
    <span class="n">str</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^-+/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>           <span class="c1">#  --&gt;&quot;My-First-2-Post-&quot;</span>
    <span class="n">str</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/-+$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>           <span class="c1">#  --&gt;&quot;My-First-2-Post&quot;</span>
    <span class="n">str</span><span class="o">.</span><span class="n">downcase</span>                  <span class="c1">#  --&gt;&quot;my-first-2-post&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">make_unique</span><span class="p">(</span><span class="n">the_slug</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
    <span class="n">arr</span> <span class="o">=</span> <span class="n">the_slug</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">arr</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">to_i</span> <span class="o">==</span> <span class="mi">0</span>
      <span class="n">the_slug</span> <span class="o">=</span> <span class="n">the_slug</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="n">count</span><span class="o">.</span><span class="n">to_s</span>
    <span class="k">else</span>
      <span class="n">the_slug</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">-</span><span class="mi">1</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="n">count</span><span class="o">.</span><span class="n">to_s</span>
    <span class="k">end</span>
    <span class="n">the_slug</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<p>What makes the Slugable module more complex is the need to handle varying attribute names for the model. This has to be specified by the model including this module. This is implemented using the <code>class_attribute :slug_column</code> and the class method <code>set_slug_column_to(column)</code>. 
So, apart from the <code>include Slugable</code> call, the models have to call the <code>set_slug_column_to</code> and pass the appropriate <code>:attribute_name</code> to it.  </p>

<table><thead>
<tr>
<th>Model</th>
<th>should include this call</th>
</tr>
</thead><tbody>
<tr>
<td>User</td>
<td><code>set_slug_column_to :username</code></td>
</tr>
<tr>
<td>Post</td>
<td><code>set_slug_column_to :title</code></td>
</tr>
<tr>
<td>Category</td>
<td><code>set_slug_column_to :name</code></td>
</tr>
</tbody></table>

<p><a href="#modt">Back</a></p>

<p><a name='gem'></a></p>

<h3 id="2.-&#39;dry&#39;ing-up-code-with-gems">2. &#39;DRY&#39;ing up code with Gems</h3>

<p>Once we have the Slugable module, it is fairly easy to create a gem from it. But why create a gem when we have DRY code already? The main reason is usability across multiple Rails projects. It will also enable other developers to use (a.k.a. &#39;consume&#39;) the gem if it is pushed to <a href="http://rubygems.org/">RubyGems.org</a>.</p>

<p>Note: One prerequisite for creating a gem is having a gem called &#39;gemcutter&#39; installed. If you don&#39;t already have it (check using <code>gem list gemcutter</code>), install it by issuing <code>gem install gemcutter</code> in your shell.</p>

<p>Since the gem is going to be a separate project, we need to create a separate folder to hold its code. The following steps highlight the process to create the slug gem.</p>

<p>A &#39;Slugable.gemspec&#39; file needs to be in the root path of the gem folder and it should have the following code:<br>
<code>ruby ./slugable.gemspec
Gem::Specification.new do |s|
  s.name        = &quot;sluggit-ppj&quot;
  s.version     = &quot;0.0.0&quot;
  s.date        = &quot;2014-10-20&quot;
  s.summary     = &quot;A slug generator gem&quot;
  s.description = &quot;A cool gem for slugifying models.&quot;
  s.author      = &quot;Prasanna Joshi&quot;
  s.email       = &quot;author@myemail.com&quot;
  s.files       = [&quot;lib/slugable_ppj.rb&quot;]
  s.homepage    = &quot;http://www.github.com&quot;
end
</code></p>

<div>Some key settings:</div>

<ul>
<li><code>s.name</code>: specifies the name of the gem</li>
<li><code>s.files</code>: specifies where the code for the gem resides</li>
<li><code>s.version</code>: versioning mechanism for the gem</li>
</ul>

<p>The &#39;./lib/slugable_ppj.rb&#39; could be an exact replica of the module file created earlier.</p>

<p>This is all we need to <strong>create our gem</strong>. Issue<br>
<code>gem build slugable.gemspec</code><br>
<div>from the gem root folder path at the shell prompt. If successful in creating the gem, you should see the following output from the command:</div>
<code>
  ~/sluggable-gem&gt; gem build slugable.gemspec
    Successfully built RubyGem
    Name: sluggit-ppj
    Version: 0.0.0
    File: sluggit-ppj-0.0.0.gem
</code>
You can see that the &#39;sluggit-ppj-0.0.0.gem&#39; file has been created in you gem root path.</p>

<div>Once created, we need to follow the steps below to actually <strong>use</strong> it now in our project:</div>

<ol>
<li>add the following lines in the Gemfile of your project to make it available:
<code>gem &#39;sluggit-ppj&#39;, path: &#39;% local_root_path_of_the_gem %&#39;</code></li>
<li>run <code>bundle install</code> after modifying the Gemfile</li>
<li>add <code>require slugable_ppj</code> before the features of the gem are called in your code (safest place to add it in is the file &#39;projec_root_path/config/application.rb&#39; because this file gets loaded immediately after the application starts)</li>
</ol>

<p>Once you have the gem working like you want to, you can push it to RubyGems.org using the &#39;gemcutter&#39; command:<br>
<code>gem push sluggit-ppj-0.0.0.gem</code><br>
The &#39;.gem&#39; file version should change based on your changes to the <code>s.version</code> setting in the &#39;.gemspec&#39; file.</p>

<p>Note: The gem can be disabled (at RubyGems.org) by issuing the 
<code>gem yank sluggit-ppj -v &#39;0.0.0&#39;</code><br>
command from the gem root path in the shell. As you can see, you can <code>yank</code> a particular version of the gem from RubyGems.org.</p>

<p><a href="#gemt">Back</a></p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
</feed>
