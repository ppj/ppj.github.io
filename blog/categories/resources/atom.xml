<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Resources | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/resources/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2015-06-03T15:39:57+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quiz for Rails Beginners 2]]></title>
    <link href="http://ppj.github.io/blog/2014/10/06/quiz-for-rails-beginners-2/"/>
    <updated>2014-10-06T13:49:13+11:00</updated>
    <id>http://ppj.github.io/blog/2014/10/06/quiz-for-rails-beginners-2</id>
    <content type="html"><![CDATA[<p>Here&#39;s the second quiz for people who are just getting started learning web-application development. This focuses more on the resources routes and related concepts in Rails.</p>

<!-- more -->

<p>Each question is a link pointing to my corresponding answer as i understand the concepts the today.</p>

<ol>
<li><p><a name='q1'></a><a href="#a1">Name all the 7 (or 8) routes exposed by the <code>resources</code> keyword in the <code>routes.rb</code> file. Also name the 4 named routes, and how the request is routed to the controller/action.</a></p></li>
<li><p><a name='q2'></a><a href="#a2">What is REST and how does it relate to the <code>resources</code> routes?</a></p></li>
<li><p><a name='q3'></a><a href="#a3">What&#39;s the major difference between model backed and non-model backed form helpers?</a></p></li>
<li><p><a name='q4'></a><a href="#a4">How does <code>form_for</code> know how to build the <code>&lt;form&gt;</code> element?</a></p></li>
<li><p><a name='q5'></a><a href="#a5">What&#39;s the general pattern we use in the actions that handle submission of model-backed forms (ie, the <code>create</code> and <code>update</code> actions)?</a></p></li>
<li><p><a name='q6'></a><a href="#a6">How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?</a></p></li>
<li><p><a name='q7'></a><a href="#a7">What are Rails helpers?</a></p></li>
<li><p><a name='q8'></a><a href="#a8">What are Rails partials?</a></p></li>
<li><p><a name='q9'></a><a href="#a9">When do we use partials vs helpers?</a></p></li>
<li><p><a name='q10'></a><a href="#a10">When do we use non-model backed forms?</a></p></li>
</ol>

<h3 id="my-answers:">MY ANSWERS:</h3>

<p><a name='a1'></a>
<strong>A1</strong>: Having <code>resources :dogs</code> in the block in the routes.rb file is going to give us the following routes</p>

<table><thead>
<tr>
<th>Prefix</th>
<th>Verb</th>
<th>URI Pattern</th>
<th>Controller#Action</th>
</tr>
</thead><tbody>
<tr>
<td>dogs</td>
<td>GET</td>
<td>/dogs(.:format)</td>
<td>dogs#index</td>
</tr>
<tr>
<td></td>
<td>POST</td>
<td>/dogs(.:format)</td>
<td>dogs#create</td>
</tr>
<tr>
<td>new_dog</td>
<td>GET</td>
<td>/dogs/new(.:format)</td>
<td>dogs#new</td>
</tr>
<tr>
<td>edit_dog</td>
<td>GET</td>
<td>/dogs/:id/edit(.:format)</td>
<td>dogs#edit</td>
</tr>
<tr>
<td>dog</td>
<td>GET</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#show</td>
</tr>
<tr>
<td></td>
<td>PATCH</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#update</td>
</tr>
<tr>
<td></td>
<td>PUT</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#update</td>
</tr>
<tr>
<td></td>
<td>DELETE</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#destroy</td>
</tr>
</tbody></table>

<p><a href="#q1">Back</a></p>

<p><a name='a2'></a>
<strong>A2</strong>: REST (<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer) is a way to maintain data persistence in <strong>stateless</strong> data-transfer protocol (which is HTTP in our case). The <code>resources</code> keyword in the routes.rb file creates the most used 7 routes (listed above) in a Rails application. These routes are RESTful because they conform to the <a href="http://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints">REST architectural constraints</a> for web application development.
<a href="#q2">Back</a></p>

<p><a name='a3'></a>
<strong>A3</strong>: The major difference is a model-backed helper requires, and directly works on, a ActiveRecord Model object for creation of equivalent HTML tags. This makes it very tightly integrated with the model object and it&#39;s attributes. A non-model backed helper is a more generic helper to create HTML tags and does not need any ActiveRecord Model object to work on.<br>
<a href="#q3">Back</a></p>

<p><a name='a4'></a>
<strong>A4</strong>: Because the <code>form_for</code> is a model-backed form helper, it takes an ActiveRecord Model object to create an HTML form for using the model object&#39;s real and virtual attributes.<br>
<a href="#q4">Back</a></p>

<p><a name='a5'></a>
<div><strong>A5</strong>: The general pattern we use in actions that handle model-backed form submission is:</div>
<ol>
  <li>Create/Update Model Object in Memory</li>
  <li>Try to save it in the database</li>
  <li>If the save succeeds, redirect to the relevant page (showing the saved item by itself or in a list)</li>
  <li>If the save fails, render the page that submitted the form again, with the error messages (stored on the in-memory object) displayed</li>
</ol>
The equivalent code for the <code>create</code> action of the Category controller would look like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@category</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">))</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if @category.save</span>
</span><span class='line'><span class="sr">    flash[:notice] = &amp;#39;New category created.&amp;#39;</span>
</span><span class='line'><span class="sr">    redirect_to categories_path</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    render :new</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;code&gt;</span>
</span><span class='line'><span class="sr">Slightly different from the `create` action, the `update` action would like like this:</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Ruby</span>
</span><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="vi">@category</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if @category.update(params.require(:category).permit(:name))</span>
</span><span class='line'><span class="sr">    flash[:notice] = &amp;#39;Category updated.&amp;#39;</span>
</span><span class='line'><span class="sr">    redirect_to category_path(@category)</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    render :edit</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure>
<a href="#q5">Back</a></p>

<p><a name='a6'></a>
<div><strong>A6</strong>:</div>
<ul class='no_extra_new_line'>
  <li>Model validations are triggered when the database is accessed for update, for example: the <code>save</code> or <code>create</code> methods are called on a model object</li>
  <li>If there are validation errors triggered during the above operation, they are saved on the model object itself which can be accessed by calling <code>#errors</code> on it</li>
  Note: model_obj.errors.full_messages can be used to retrieve an array of error messages
  <li>This object cab be saved in an instance variable of the controller class and then can be used in the rendered template to display errors as shown below</li>
</ul>
<code>Ruby
&lt;% if model_obj.errors.any? %&gt;
  &lt;div class=&#39;row&#39;&gt;
    &lt;div class=&#39;alert alert-error span8&#39;&gt;
      &lt;h5&gt;Please fix the errors below to submit successfully:&lt;/h5&gt;
      &lt;ol&gt;
        &lt;% model_obj.errors.full_messages.each do |msg| %&gt;
          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
        &lt;% end %&gt;
      &lt;/ol&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code>
<a href="#q6">Back</a></p>

<p><a name='a7'></a>
<strong>A7</strong>: Rails helpers are methods that can be defined to contain repetitive logic for the presentation layer (used by the view templates). These helper methods usually go in the <code>app\helpers\application_helper.rb</code> file under the Rails project folder.<br>
<a href="#q7">Back</a></p>

<p><a name='a8'></a>
<strong>A8</strong>: Rails partials are HTML snippets which need to be reused in many view templates with no or minimum modifications (that can be handled by arguments). Filenames for partials begin with an <code>_</code>, for example: <code>_errors.html.erb</code>. This partial can be used by calling the render method on it, as in <code>&lt;%= render &#39;shared/errors&#39;, model_obj: @post %&gt;</code> where <code>model_obj</code> is an argument variable name that will be used in the partial (refer to the HTML code in <a href="#a6">Answer 6</a> above).<br>
<a href="#q8">Back</a></p>

<p><a name='a9'></a>
<strong>A9</strong>: Partials should be preferred over helpers when too much HTML needs to be embedded. Helpers should be reserved more for the logic (parsing / reformating / calculations) than the presentation itself.
<a href="#q9">Back</a></p>

<p><a name='a10'></a>
<strong>A10</strong>: Non-model backed form helpers should be used whenever user-input elements need to be generated for properties which are not the associated attributes of an ActiveRecord Model object.<br>
<a href="#q10">Back</a></p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Rails: RDBMS, Associations, Resources]]></title>
    <link href="http://ppj.github.io/blog/2014/09/25/getting-started-with-rails/"/>
    <updated>2014-09-25T14:27:22+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/25/getting-started-with-rails</id>
    <content type="html"><![CDATA[<p><a name='top'></a></p>

<div>Concepts covered in the first session of the <a href='http://www.gotealeaf.com/curriculum#!rails'>&#8216;Rapid Prototyping with Ruby on Rails&#8217;</a> course at <a href='http://www.gotealeaf.com/'>TeaLeaf Academy</a>:</div>

<ul>
<li><a href="#rdbms">Basics of Relational Databases</a></li>
<li><a href="#ar">ActiveRecord</a></li>
<li><a href="#mig">Migrations</a></li>
<li><a href="#assoc">Associations (1:M and M:M)</a></li>
<li><a href="#res">Resources</a></li>
</ul>

<!-- more -->

<p><a name='rdbms'></a>  </p>

<h3 class='no_extra_new_line'>Basics of Relational Databases</h3>

<ul>
<li>A single table in a relational db, in its simplest form, can be imagined to be like a spread-sheet (rows and columns)</li>
<li>Each column has a title (attribute) and can store only one predefined type of data (integer, string, boolean, &#8230;) and this is where it differs from a generic spreadsheet</li>
<li>Each row represents the data stored in the form of attribute values as per the columns</li>
<li>Each row is identified by a unique integer attribute called the &#39;primary_key&#39; of the table</li>
<li>There can be multiple (linked or unlinked) tables in the database, just like one file can have multiple spread-sheets</li>
<li>One table refers to the rows of one other table using an integer attribute called the &#39;foreign_key&#39; (see image below for illustration - Courtesy: <a href="http://publib.boulder.ibm.com">http://publib.boulder.ibm.com</a>)<br>
<img src="http://publib.boulder.ibm.com/infocenter/soliddb/v6r3/topic/com.ibm.swg.im.soliddb.sql.doc/figure/ReferentialConstraint.gif" alt="Courtesy: http://publib.boulder.ibm.com" title="Primary Key - Foreign Key"><br>
<strong>The CUST_ID is foreign key in Accounts table and primary key for the Customers table</strong></li>
<li>The foreign-key column is used to set up a 1-to-Many association between two tables (Foreign Key is on the &#39;Many&#39; table)</li>
<li>Rails offers SQLite3 as the default database (<a href="http://sqlitestudio.pl/">SQLiteStudio</a> is a good free viewer available for SQLite3 among many other free and paid ones)</li>
<li>A db table has two views

<ul>
<li><em>schema view</em>: shows the columns in each table and the type of data each column can store</li>
<li><em>data view</em>: shows the actual data in the table (much like the spread-sheet view)</li>
</ul></li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='ar'></a></p>

<h3 class='no_extra_new_line'>ActiveRecord</h3>

<ul>
<li>ActiveRecord is a pattern which helps abstract queries to the database through something called <strong>O</strong>bject <strong>R</strong>elational <strong>M</strong>apper (ORM)</li>
<li>ORM helps generate SQL queries using a Object#method syntax, for example (in Rails)

<ul>
<li>code like <code>Post.all</code> would generate an SQL query that looks like</li>
<li><code>SELECT &quot;posts&quot;.* FROM &quot;posts&quot;</code> which extracts all rows from the Post table in the database</li>
</ul></li>
<li>Each instance of an ActiveRecord Model object represents a row in the corresponding table</li>
<li>Each object has getter and setter methods for the real attributes (columns) as well as virtual attributes (created based on associations)</li>
<li>ActiveRecord in Rails is a thus a very simple, yet powerful (convenient) ORM implementation that saves lot of verbosity</li>
<li>Although not obvious to new web developers (like me :-)), but the simplicity of Rails ActiveRecord brings in a harsh limitation on Rails

<ul>
<li>the more complex the database(s) gets (big banks, hospitals, large corporations, etc.), the harder it is to translate code to SQL commands when data for one object spans over multiple tables across multiple linked databases</li>
<li>these large and complex databases need to be optimized for other aspects (for example, analytics) than just simple traversing</li>
</ul></li>
<li>See the image below (Courtesy: Tealeaf Academy) to get the basic idea of the implementation of ActiveRecord in Rails
<img src="http://d3ncao0pifc37i.cloudfront.net/images/ar_db_connection.jpg" alt="ActiveRecord in Rails" title="ActiveRecord in Rails"></li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='mig'></a></p>

<h3 class='no_extra_new_line'>Migrations</h3>

<ul>
<li>Migrations are modifications done to the database schema (additions, deletions, modifications of or to the individual tables in the database)</li>
<li>Migrations should be created using the <code>rails generate migrations new_migration_name</code> task (this is the only worthwhile use of the <code>rails generate</code> task)

<ul>
<li>the created migration file (Ruby) could be then modified manually to fine-tune the changes to be made to the schema </li>
</ul></li>
<li>Migrations should be effected using the <code>rake db:migrate</code> rake task

<ul>
<li>this will modify the schema.rb file to record the changes made to the schema (this file should be checked into the version control system)</li>
<li>this task will also make the implement the changes in the db (which is not checked in to the repository)</li>
</ul></li>
<li>see the <a href="http://guides.rubyonrails.org/migrations.html">Migrations documentation</a> for details</li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='assoc'></a></p>

<h3 class='no_extra_new_line'>Associations</h3>

<ul>
<li>1-to-Many (1:M) associations between two Models (each table in the db represents an ActiveRecord Model) can be set up using the foreign-key attribute</li>
<li>The model class for each entity needs to have the appropriate command that Rails provides to set up this association correctly (See the image below as an example - Courtesy: Tealeaf Academy)
<img src="http://d3ncao0pifc37i.cloudfront.net/images/1-M_association.png" alt="1:M Association Setup" title="1:M Association Setup"></li>
<li>Many-to-Many (M:M) associations are essentially two 1:M associations set up <strong>through</strong> an intermediary table, called the join-table</li>
<li>the preferred way to set up a M:M association is using a <code>has_many, through:</code> (hmt) method (see the diagram below - Courtesy: Tealeaf Academy)
<img src="http://d3ncao0pifc37i.cloudfront.net/images/M-M_association.png" alt="M:M Association Setup" title="M:M Association Setup"></li>
<li>the &#39;hmt&#39; method lets us have the join-table as an ActiveRecord Model, which means it can have additional attributes (like created_at if we want to keep track of how long the association exists between the two objects of the end models)</li>
<li>the non-preferred way to set up a M:M is with a <code>has_and_belongs_to_many</code> method</li>
<li>the &#39;habtm&#39; way needs a join-table too but does not give us a join-model, which limits the way we can use the join-table</li>
<li>see the <a href="http://guides.rubyonrails.org/association_basics.html">Associations Basics documentation</a> for details</li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='res'></a></p>

<h3 class='no_extra_new_line'>Resources</h3>

<ul>
<li>The routes.rb file defines all the routes the web application can take</li>
<li>Individual routes can be added to this file using the syntax <code>HTTP_METHOD &#39;/route&#39;, to: &#39;controller#action&#39;</code>

<ul>
<li><code>get &#39;/posts&#39;, to: &#39;posts#index&#39;</code> will set a route for a GET request to the /posts path to be handled by the Posts controller&#39;s <code>index</code> action</li>
</ul></li>
<li><div>The most common routes required for a controller named, say Posts, can be added by a single line of code in the routes.rb file</div>

<ul>
<li>just having <code>resources :posts</code> in the block in the routes.rb file is going to give the following routes</li>
</ul>

<table><thead>
<tr>
<th>Prefix</th>
<th>Verb</th>
<th>URI Pattern</th>
<th>Controller#Action</th>
</tr>
</thead><tbody>
<tr>
<td>posts</td>
<td>GET</td>
<td>/posts(.:format)</td>
<td>posts#index</td>
</tr>
<tr>
<td></td>
<td>POST</td>
<td>/posts(.:format)</td>
<td>posts#create</td>
</tr>
<tr>
<td>new_post</td>
<td>GET</td>
<td>/posts/new(.:format)</td>
<td>posts#new</td>
</tr>
<tr>
<td>edit_post</td>
<td>GET</td>
<td>/posts/:id/edit(.:format)</td>
<td>posts#edit</td>
</tr>
<tr>
<td>post</td>
<td>GET</td>
<td>/posts/:id(.:format)</td>
<td>posts#show</td>
</tr>
<tr>
<td></td>
<td>PATCH</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>PUT</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>DELETE</td>
<td>/posts/:id(.:format)</td>
<td>posts#destroy</td>
</tr>
</tbody></table></li>
<li><div>This can be customized by using the <code>except:</code> or <code>only:</code> options</div>

<ul>
<li><code>resources :posts, except: :destroy</code> would set all routes except the DELETE (last one in the list above)</li>
<li><code>resources :posts, only: [:index, :new, :create]</code> will set routes only for the first three actions in the list above</li>
</ul></li>
<li><p>See this <a href="http://guides.rubyonrails.org/routing.html">Rails Routing Guide page</a> for details</p></li>
</ul>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
</feed>
