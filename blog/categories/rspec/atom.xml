<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2015-06-03T23:02:29+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Takeaways From Course 3 - Part 3]]></title>
    <link href="http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-3/"/>
    <updated>2015-06-03T15:48:12+10:00</updated>
    <id>http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-3</id>
    <content type="html"><![CDATA[<p>These are some key takeaways from the <a href="http://www.gotealeaf.com/curriculum#!production-apps">3rd course</a> for me based on the curriculum as well as the feedback received from the TAs for every module (aka Week).</p>

<div class="no_extra_new_line">In Module 4, focus was on learning&#8230;</div>

<ul>
<li>self-referential associations (a user following another user)</li>
<li>ActionMailer: sending emails</li>
<li>token generation for password reseting</li>
</ul>

<!--more-->

<h3 id="module-4">Module 4</h3>

<div class="no_extra_new_line">This week i was reminded of some basics again (which i had forgotten!). Primarily:</div>

<ul>
<li>Avoid rendering from a POST request unless there&#8217;s an error.</li>
<li>Try to keep the test setup close to the action and assertion (double check the use of <code>let</code> and <code>before</code> after writing specs). This helps in readability of the specs.</li>
<li>Single-Assertion Principle (more of a guideline than a law): Avoid unrelated assertions in a single spec.</li>
<li>Name the shared_examples well enough to be understood clearly.
<li>Use <code>flash.now["alert message"]</code> for <code>render</code>ing instead of <code>flash["alert message"]</code>. The latter carries over to the next request which is why it is used with <code>redirect_to</code> - a new request.
</ul>

<div class="no_extra_new_line">Other tips i appreciated in my code review were:</div>

<ul>
<li>Use <code>pluck</code> instead of <code>map</code> for performance. <code>pluck</code> pulls only the ids from the database and loads the data into an array. It saves a lot of processing time and power over loading every record into memory using <code>map</code>. However, <a href="http://6ftdan.com/allyourdev/2015/05/13/rails-dont-pluck-unnecessarily">here&#8217;s an article</a> that talks about when <code>pluck</code> is unnecessary.</li>
<li>For efficient single-record search, use <code>find_by(attribute: value)</code> than the fancy <code>find_by_attribute(value)</code>, which goes through <code>method_missing</code>, and doesn&#8217;t even save much typing!</li>
<li>Avoid writing migrations for populating data. Write a <a href="http://guides.rubyonrails.org/command_line.html#custom-rakek">custom rake task</a> under &#8216;lib/tasks&#8217; instead.</li>
<li>Clear ActionMailer deliveries using <code>ActionMailer::Base.deliveries.clear</code> in <code>before</code> or <code>after</code> hooks instead of in a particular spec to ensure their purging.
</ul>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Takeaways From Course 3 - Part 2]]></title>
    <link href="http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-2/"/>
    <updated>2015-06-03T12:59:46+10:00</updated>
    <id>http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-2</id>
    <content type="html"><![CDATA[<p>These are some key takeaways from the <a href="http://www.gotealeaf.com/curriculum#!production-apps">3rd course</a> for me based on the curriculum as well as the feedback received from the TAs for every module (aka Week).</p>

<div class="no_extra_new_line">In Module 3, focus was on learning&#8230;</div>

<ul>
<li>to keep controllers skinny</li>
<li>ActiveRecord transactions (all or none!)</li>
<li>RSpec macros and shared_examples</li>
<li>Capybara introduction and first feature spec</li>
</ul>

<!--more-->

<h3 id="module-3">Module 3</h3>

<ul>
<li>Outside-in development in action with feature-specs in Capybara: Starting with a feature-spec (BDD) and letting it drive the design (models/routes/controllers) seems to be coming a bit more naturally to me than the other way round</li>
<li>Single-Assertion Principle can (and should) be violated in feature-specs: not just to DRY up the code, but mainly because feature specs are expensive to run!</li>
<li>ActiveRecord transactions was one of the primary learnings when trying to update the video positions in the queue. Got introduced to <a href="http://en.wikipedia.org/wiki/ACID">ACID</a>, thanks to the missus!</li>
<li>RSpec shared_examples and macros are very helpful in DRYing up the specs.</li>
<li>Got re-exposed to :xpath based search of elements in the view template! DOM tree, XPath, had heard and read about these a long time ago for some thing totally different!</li>
</ul>

<h4 id="finer-points:">Finer points:</h4>

<ul>
<li><code>QueueItem.find_by(id: params[:id], user: current_user)</code>
does not throw a &#8220;RecordNotFound&#8221; exception in rails. Doing this <code>current_user.queue_items.find(params[:id])</code> does. Use either knowingly!</li>
<li>Do not prefix method names with <code>get_</code> or <code>set_</code>. Instead come up with better names to indicate what they do.</li>
<li>Use <code>method: delete</code> instead of the default <code>get</code> for destroying a record so that the route cannot be bookmarked.</li>
<li>Use <code>find_by</code> instead of <code>where(...).first</code> for searching a single record.</li>
<li>Prefix <code>self.</code> when assigning value to an instance variable but it is not necessary when using the variable in an instance method.</li>
</ul>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Takeaways From Course 3 - Part 1]]></title>
    <link href="http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-1/"/>
    <updated>2015-06-03T10:55:35+10:00</updated>
    <id>http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-1</id>
    <content type="html"><![CDATA[<p>These are some key takeaways from the <a href="http://www.gotealeaf.com/curriculum#!production-apps">3rd course</a> for me based on the reviews i received from the TAs for every module (aka Week).</p>

<p>This is my beginner-TDD phase, so a lot these pertain to that in general and RSpec in specific(!), since that is what will be used in the course as the testing framework.</p>

<!--more-->

<h3 id="module-1">Module 1</h3>

<ul>
<li>Show success or failure flash-messages when handling post requests to notify the user</li>
<li>Standard validations on a models attribute can be written in a single line, like this:<br>
<code>validates :email, length: {minimum: 5}, uniqueness: true</code>
Whether it should be done or not depends on how much it affects readability</li>
<li>Why (it used to be necessary to) end a file with a blank line? <a href="http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline">Read here</a>.</li>
</ul>

<h3 id="module-2">Module 2</h3>

<ul>
<li>As a beginner-TDDer,

<ol>
<li>Start putting stuff in views assuming public interfaces of classes/models and Controller#actions. And then get into writing failing tests (first functional/controller and then unit/model).*</li>
<li>Write spec titles for as many scenarios as you can think of starting with the most obvious ones through to edge cases, <em>without over-analyzing it</em> (you can always add more tests!).</li>
<li>Start the red-green-refactor cycle in the same order.<br></li>
<li>Do not test the code you do not own. For example, whether a <code>GET</code> request to <code>books#index</code> renders the &quot;books/index.html.haml&quot; template. That is pretty much Rails&#39; responsibility!<br></li>
</ol></li>
<li>Make sure the test setup is not too far from the action and assertion in a spec. This tends to happen when using <code>let</code>, <code>let!</code>, <code>before</code> in RSpec.<br></li>
<li>Loved the use of the <a href="http://www.fabricationgem.org/">Fabrication</a> and <a href="https://github.com/stympy/faker">Faker</a> gems in generating test data!<br></li>
</ul>

<p>* <strong>Let BDD drive TDD</strong>: Outside-in development comes more naturally to me. <a href="http://webuild.envato.com/blog/making-the-most-of-bdd-part-1/">Here&#39;s a great article</a> about this approach.</p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Note About Creating an Associated Model]]></title>
    <link href="http://ppj.github.io/blog/2015/02/25/a-note-about-creating-an-associated-model/"/>
    <updated>2015-02-25T00:09:06+11:00</updated>
    <id>http://ppj.github.io/blog/2015/02/25/a-note-about-creating-an-associated-model</id>
    <content type="html"><![CDATA[<p>For a Review model which <code>belongs_to</code> a Video (Video <code>has_many :reviews</code>), there are a few ways to create a new Review associated to a Video. Two of which are:</p>

<!-- more -->

<p>Given <code>test_video = Video.create(...) # attributes for video omitted</code></p>

<ol>
<li><code>Review.create(video: test_video, ...) # other attributes for review omitted</code>, or</li>
<li><code>test_video.reviews.create(...) # attributes for review omitted</code></li>
</ol>

<p>Here are the Review and Video models for reference:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Video &lt; ActiveRecord::Base
  # irrelevant stuff omitted
  before_validation :update_rating!

  has_many :reviews

  private

  def update_rating!
    # update the video&#39;s average rating based on it&#39;s reviews&#39; ratings
  end
end
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">class Review &lt; ActiveRecord::Base
  after_save :update_video_rating!

  # irrelevant stuff omitted
  belongs_to :video

  private

  def update_video_rating!
    video.save if video
  end
end
</code></pre></div>
<p>The difference between the two methods to create the Review became obvious because i had the following in the test for the Review model:
<code>ruby
expect(test_video).to receive(:update_rating!).with(no_args)
Review.create( ..., video: test_video)
</code></p>

<p>The above test wouldn&#39;t pass because when the Review instance is created this way, the test_video instance in the test has a different memory location from the one which received the <code>update_rating!</code> call through the Review model <code>after_save :update_video_rating</code> callback.</p>

<p>When the Review instance is created using the 2nd way shown above, the same test passes because now the Video instance that receives the <code>update_rating!</code> call doesn&#39;t change.</p>

<p>However, i think i would still rewrite the expectation to accommodate for both calls this way:
<code>expect_any_instance_of(Video).to receive(:update_rating!).with(no_args)</code></p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
</feed>
