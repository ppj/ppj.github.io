<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Messages | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/messages/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2015-06-03T23:02:29+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Note About Creating an Associated Model]]></title>
    <link href="http://ppj.github.io/blog/2015/02/25/a-note-about-creating-an-associated-model/"/>
    <updated>2015-02-25T00:09:06+11:00</updated>
    <id>http://ppj.github.io/blog/2015/02/25/a-note-about-creating-an-associated-model</id>
    <content type="html"><![CDATA[<p>For a Review model which <code>belongs_to</code> a Video (Video <code>has_many :reviews</code>), there are a few ways to create a new Review associated to a Video. Two of which are:</p>

<!-- more -->

<p>Given <code>test_video = Video.create(...) # attributes for video omitted</code></p>

<ol>
<li><code>Review.create(video: test_video, ...) # other attributes for review omitted</code>, or</li>
<li><code>test_video.reviews.create(...) # attributes for review omitted</code></li>
</ol>

<p>Here are the Review and Video models for reference:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Video &lt; ActiveRecord::Base
  # irrelevant stuff omitted
  before_validation :update_rating!

  has_many :reviews

  private

  def update_rating!
    # update the video&#39;s average rating based on it&#39;s reviews&#39; ratings
  end
end
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">class Review &lt; ActiveRecord::Base
  after_save :update_video_rating!

  # irrelevant stuff omitted
  belongs_to :video

  private

  def update_video_rating!
    video.save if video
  end
end
</code></pre></div>
<p>The difference between the two methods to create the Review became obvious because i had the following in the test for the Review model:
<code>ruby
expect(test_video).to receive(:update_rating!).with(no_args)
Review.create( ..., video: test_video)
</code></p>

<p>The above test wouldn&#39;t pass because when the Review instance is created this way, the test_video instance in the test has a different memory location from the one which received the <code>update_rating!</code> call through the Review model <code>after_save :update_video_rating</code> callback.</p>

<p>When the Review instance is created using the 2nd way shown above, the same test passes because now the Video instance that receives the <code>update_rating!</code> call doesn&#39;t change.</p>

<p>However, i think i would still rewrite the expectation to accommodate for both calls this way:
<code>expect_any_instance_of(Video).to receive(:update_rating!).with(no_args)</code></p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
</feed>
