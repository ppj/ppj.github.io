<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2015-06-03T23:02:29+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developing Web-based BlackJack]]></title>
    <link href="http://ppj.github.io/blog/2014/09/04/developing-web-based-blackjack/"/>
    <updated>2014-09-04T12:24:46+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/04/developing-web-based-blackjack</id>
    <content type="html"><![CDATA[<p>So, i am finally done developing the web-version of the BlackJack game! Like i mentioned in the previous post, it was suggested in the TeaLeaf course to use procedural programming to keep it simple and focused on web application development learning!</p>

<!-- more -->

<p>Quoted below are the reasons for two major simplifications adopted in this first web-app development exercise -</p>

<div><strong>Why procedural programming instead of OOP</strong>:</div>

<blockquote>
<p>We chose to not use OOP to manage our code. We&#39;ve seen that many people get stuck on OOP and can&#39;t move forward, and we want people to focus on web development and primary, HTTP in this lesson.  </p>
</blockquote>

<div><strong>Why simpler session-based persistence (cookies) instead of databases:</strong></div>

<blockquote>
<p>We chose to not include databases in this section, and instead chose to use the session, which is cookie-backed, for cheap persistence. Again, the reason is because many people get stuck on database concepts, which are important, but we want to direct focus on dealing with HTTP.  </p>
</blockquote>

<p>Relational database will be introduced and used in the subsequent TeaLeaf courses.</p>

<h3 class='no_extra_new_line'>Sinatra Files/Folder Structure for <a href="https://github.com/ppj/blackjack_web"><em>My</em> App</a>:</h3>

<ul>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/main.rb"><em>main.rb</em></a>: the main Ruby file with handlers for the HTTP requests</li>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/config.ru"><em>config.ru</em></a>: Sinatra settings and launcher file

<ul>
<li>use <code>rackup -p ABCD</code> to initiate a local WeBrick server @ port <em>ABCD</em> (defaults to 9292)<br></li>
</ul></li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public"><strong>public</strong></a>

<ul>
<li>stores <a href="https://github.com/ppj/blackjack_web/blob/master/public/application.js">custom JavaScript</a> and <a href="https://github.com/ppj/blackjack_web/blob/master/public/application.css">CSS</a> <em>files</em> </li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public/images"><strong>images</strong></a>: stores the image files used in the app</li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public/vendor"><strong>vendor</strong></a>: can store third party &#39;plugins&#39;, like Twitter-Bootstrap files<br></li>
</ul></li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/views"><strong>views</strong></a>

<ul>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/views/layout.erb"><em>layout.erb</em></a>: default (but customizable) erb layout to encompass the other erb templates in</li>
<li>other erb templates (use <code>, :layout false</code> while rendering to avoid embedding these in the <em>layout.erb</em>)</li>
</ul></li>
</ul>

<h3 class='no_extra_new_line'>Thumb Rules Followed:</h3>

<ul>
<li><code>/GET</code> requests generally render &#39;.erb&#39; (<strong>E</strong>mbedded <strong>R</strong>u<strong>b</strong>y HTML templates)</li>
<li><code>/POST</code> requests generally <code>redirect</code> to another request (typically a <code>\GET</code> request handler)</li>
</ul>

<h3 class='no_extra_new_line'>Salient Features:</h3>

<ul>
<li>Empty string or blank spaces not allowed as player name</li>
<li>Initial chip-count or bet cannot be empty/blank, non-numeric, or &gt; remaining chips</li>
<li>Auto adjusts bet amount if set &gt; remaining chips and warns player accordingly</li>
<li>Using the <code>session</code> hash the app remembers the following:

<ul>
<li>last player&#39;s name</li>
<li>previous bet amount</li>
</ul></li>
<li>Tracks and displays chip-count on the round, and betting pages</li>
<li>Player wins - message in green</li>
<li>Player loses - message in red</li>
<li>Game pushes (ties) - message in blue</li>
<li>&quot;AJAXified&quot; the Hit, Stay and Dealer Next Card buttons - avoids reloading the entire page</li>
</ul>

<h3 class='no_extra_new_line'>Key Takeaways:</h3>

<ul>
<li>the difference between client side vs server side code</li>
<li>what the DOM means and how to use jQuery to manipulate it</li>
<li>unobtrusive JavaScript, and AJAX: when, and how, to use them</li>
<li>dealing with re-binding issues when the DOM changes (the green highlighted lines are preferred over the red highlighted ones in the AJAX code below)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$(document).ready(function() {&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;$(&amp;#39;#hit_form input&amp;#39;).click(function() {&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;$(document).on(&amp;#39;click&amp;#39;, &amp;#39;#hit_form input&amp;#39;, function() {&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$.ajax({
</span><span class='line'>  type: &amp;#39;POST&amp;#39;,
</span><span class='line'>  url: &amp;#39;/round/player/hit&amp;#39;
</span><span class='line'>}).done(function(msg) {&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;$(&amp;#39;#game_area&amp;#39;).html(msg);&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;$(&amp;#39;#game_area&amp;#39;).replaceWith(msg);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;});
</span><span class='line'>// prevent from further execution of the route
</span><span class='line'>return false; // or event.preventDefault();
</span><span class='line'>});
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>

<h3 class='no_extra_new_line'>Other Notes:</h3>

<ul>
<li>The equivalent of ShotGun gem for Windows is the Sinatra/Reloader gem. Both enable on the fly changes to the code; i.e. the local server instance need not be restarted to see the changes made to the code, a simple page refresh is enough once the changes are saved.
<code>ruby
if RUBY_PLATFORM.downcase.include?(&#39;w32&#39;)
require &#39;sinatra/reloader&#39;
end
</code></li>
</ul>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
</feed>
