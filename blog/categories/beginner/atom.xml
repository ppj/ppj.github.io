<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Beginner | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/beginner/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2014-09-16T13:47:47+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My (Failed) Initial Experiments With TDD]]></title>
    <link href="http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd/"/>
    <updated>2014-09-03T12:10:14+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd</id>
    <content type="html"><![CDATA[<p>My better-half is a software developer with a rich experience of 10+ years. She absolutely swears by Test Driven Development (TDD). And seems to have all the right reasons for preaching it, as far as my limited knowledge goes. I read up a bit about it and watched a few screen casts too.</p>

<!-- more -->

<p>So when i was to start developing the object oriented console-based BlackJack game, i thought i&#39;d give it a shot. After all this was technically my 2nd go at developing an OO application (the TicTacToe game was the first)!</p>

<p>I installed the rspec gem, enabled color display for my PowerShell (yes i use Windows!) to actually <em>feel</em> the <em>red-green</em>-refactor cycle! I was all set. Or so i thought. I started with writing the tests for the most fundamental of the classes my problem statement gave me, the Card class. I had read that TDD is much more than writing tests first. Primarily, it should lead to evolvution your application design, and that, adhering to the SOLID principles of object oriented design. And that&#39;s where the problems began.</p>

<p>I had also read the theory about the five Object Oriented Design Principles (SOLID). Also, how it can (is supposed to) ensure low-coupling and high-cohesion between classes. This is where my inexperience in OOP started showing up. </p>

<p>I forced myself to move from the Card class to the Deck class. I continued using TDD to develop it. But i just could not use TDD to continue to develop the app! I could not see how TDD would help me take the program further! I even asked my wife to show me how she would do it (for a couple of sessions at least). That didn&#39;t help much either.</p>

<p>Finally after much frustration, arguments and some more reading up i decided not to muddle my learning with TDD <em>for now</em>.</p>

<p>One article that helped me reach this conclusion: <a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html"><strong>The Failures of &quot;Intro to TDD&quot;</strong></a>. Especially the introduction and the last two sections.</p>

<p>Also, my course instructor at TeaLeaf helped me understand the reasons of not using TDD at an early stage of learning OOP&#8230; which are what i have talked about above. I will not experiment much with it before i start the third course which talks in depth about the SOLID principles. Moreover, it is expected to be completed using TDD through-out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Writing a (Procedural) Program]]></title>
    <link href="http://ppj.github.io/blog/2014/08/18/how-to-start-writing-a-procedural-program/"/>
    <updated>2014-08-18T13:13:27+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/18/how-to-start-writing-a-procedural-program</id>
    <content type="html"><![CDATA[<p>I have starter trouble&#8230; always. I either spend way too much time &#39;planning&#39; and &#39;collecting information&#39; when i want to start something new, or, the other extreme (but less often), just dive right into it and then suffer due to under preparation.</p>

<!-- more -->

<p>The fundamental technique i learnt during the first course in the first <a href="http://www.gotealeaf.com/">TeaLeaf</a> course on Ruby basics was how to start writing a program. In other words, how much preparation is just enough to start writing a procedural program.</p>

<p>A quick side-note: Although, procedural programming is (almost) a thing of the past, and all for the right reasons, it is still a great way to start learning programming IMO. The primary reason, i believe, is our brains are wired to think sequentially or serially: first do this, then get the result, then do that&#8230; and so on. At least mine is.</p>

<p>So to get over that starting trouble, the technique to start writing a program that best helped me is writing psuedo-code. &quot;Pseudo&quot; as in made up syntax, not bother about whether it will run, because it will not! The psuedo-code is almost plain English, or very close to it. Just enough to guide you in writing the actual code.</p>

<p>Just jot down the logical steps (loops, conditionals, operations) you think are required to solve the programming problem. One rule i stuck to when doing this exercise is: use consistent indentation for readability.</p>

<p>As an example, this is the psuedo code i wrote for a console-based player-vs-computer Tic-Tac-Toe game:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Start with an empty 3x3 board
until board full or winner
  ask player to chose empty square to mark his/her &#39;X&#39;
  display board
  if player won?
    announce winner and end game
  else if board full?
    end game
  else
    generate a random number and let the computer choose an empty square to mark its &#39;O&#39;
  end
  display board
  if computer won
    announce winner and end game
  elsif board full?
    end game
  end
end
</code></pre></div>
<div>Some features of this technique are:</div>

<ul>
<li>it highlights my logic of developing a solution</li>
<li>it helps to keep focus on the current coding task</li>
<li>it helps to bring focus back to the next coding task if the previous one took longer than normal for whatever reasons (new language, syntactical errors)</li>
<li>it need not be perfect (or updated all the time for small changes in the actual implementation)</li>
<li>The final Ruby code for this simple application (if it can be called that!) can be found <a href="https://github.com/ppj/tealeaf1_Lesson1/blob/master/tic_tac_toe.rb">here</a> </li>
</ul>
]]></content>
  </entry>
  
</feed>
