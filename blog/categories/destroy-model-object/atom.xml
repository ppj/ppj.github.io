<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Destroy Model Object | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/destroy-model-object/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2014-10-14T23:49:16+11:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Additional Features for the PostIt App]]></title>
    <link href="http://ppj.github.io/blog/2014/10/13/some-additional-features-for-the-postit-app/"/>
    <updated>2014-10-13T14:30:40+11:00</updated>
    <id>http://ppj.github.io/blog/2014/10/13/some-additional-features-for-the-postit-app</id>
    <content type="html"><![CDATA[<p>Almost at the end of <a href="/2014/10/12/quiz-for-rails-beginners-3/">Lesson 3</a>, i decided to add a couple of additional features to my <a href="http://ppj-postit.herokuapp.com/">PostIt</a> web application i am developing as a part of the <a href="http://www.gotealeaf.com/curriculum#!rails">second course</a> at <a href="http://www.gotealeaf.com/">Tealeaf Academy</a></p>

<!-- more -->

<p>Here are the two features i have attempted to add:</p>

<ol>
<li><a href="#new_category">Creation Of A New Category On The Go</a></li>
<li><a href="#vote_deletion">Deletion Of A Vote</a></li>
</ol>

<p><a name='new_category'></a></p>

<h3 id="create-a-new-category-on-the-go">Create A New Category On The Go</h3>

<p>In the default application (as instructed in the course), the only way to create a new category was through the Categories dropdown button in the navigation bar as show in the image below:</p>

<p><center><img src="/images/dropdown_new_category.jpg" alt="Add new category"></center></p>

<p>This is not very helpful when a user would want to add a new category during creation of a new post. So, i added a new category creation form inside the Posts-new view template. But that meant making sure the validation on the category name fired from here without destroying the new post contents. This also necessitated the use of non-model backed form helpers (although Category is a model, the text-field to pass new category name is not in a Category model-backed form).</p>

<p>This helper in the Posts controller class helps to determine whether to create a new category or not:
<figure class='code'><figcaption><span>posts_controller.rb : create_new_category</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">def</span> <span class="nf">create_new_category</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if params[:new_category].strip.empty?</span>
</span><span class='line'><span class="sr">    false</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    category_names = Category.all.map(&amp;amp;:name)</span>
</span><span class='line'><span class="sr">    index = category_names.index(params[:new_category])</span>
</span><span class='line'><span class="sr">    if index</span>
</span><span class='line'><span class="sr">      @category = Category.find_by(name: category_names[index])</span>
</span><span class='line'><span class="sr">      @category.id</span>
</span><span class='line'><span class="sr">    else</span>
</span><span class='line'><span class="sr">      @category = Category.new(name: params[:new_category])</span>
</span><span class='line'><span class="sr">      if @category.save</span>
</span><span class='line'><span class="sr">        @category.id</span>
</span><span class='line'><span class="sr">      else</span>
</span><span class='line'><span class="sr">        false</span>
</span><span class='line'><span class="sr">      end</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The following code in the Posts#create uses the above helper:
<figure class='code'><figcaption><span>posts_controller.rb : create</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">category_index</span> <span class="o">=</span> <span class="n">create_new_category</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if category_index</span>
</span><span class='line'><span class="sr">  flash[:notice] = &amp;quot;Category &amp;amp; Post created successfully!&amp;quot;</span>
</span><span class='line'><span class="sr">  category_check_passed = true</span>
</span><span class='line'><span class="sr">elsif @category</span>
</span><span class='line'><span class="sr">  category_check_passed = @category.errors.empty?</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  category_check_passed = true</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">category_check_passed</span>
</span><span class='line'>  <span class="vi">@post</span><span class="o">.</span><span class="n">categories</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@category</span> <span class="k">if</span> <span class="n">category_index</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">||=</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="no">Post</span> <span class="n">created</span> <span class="n">successfully!</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="vi">@new_category</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:new_category</span><span class="o">]</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It is used in a similar way in the Posts#update action.</p>

<p>Here&#39;s how it looks in the create-new-post form now:
<center><img src="/images/new_category_blank.JPG" alt="New Category Blank"></center></p>

<p>If, new category creation fails:
<center><img src="/images/new_category_error.JPG" alt="New Category Error"></center></p>

<p>Here&#39;s the post after the validation passes:
<center><img src="/images/new_category_success.JPG" alt="New Category Success"></center></p>

<p>The changes in the form partial are highlighted in the git-diff below:
<code>diff views/posts/\_form.html.erb
 &lt;div class=&#39;well&#39;&gt;
   &lt;%= render &#39;shared/errors&#39;, model_obj: @post %&gt;
   &lt;%= form_for @post do |f| %&gt;
     &lt;div class=&#39;control-group&#39;&gt;
       &lt;%= f.label :title %&gt;
       &lt;%= f.text_field :title %&gt;
     &lt;/div&gt;
     &lt;div class=&#39;control-group&#39;&gt;
       &lt;%= f.label :url %&gt;
       &lt;%= f.text_field :url %&gt;
     &lt;/div&gt;
     &lt;div class=&#39;control-group&#39;&gt;
       &lt;%= f.label :description %&gt;
       &lt;%= f.text_area :description, rows: 4 %&gt;
     &lt;/div&gt;
     &lt;br/&gt;
     &lt;div class=&#39;control-group&#39;&gt;
       &lt;%= f.label :category_ids, &quot;Categories&quot; %&gt;
       &lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name do |b| %&gt;
         &lt;% b.label(class: &quot;checkbox inline&quot;) { b.check_box(class: &quot;checkbox inline&quot;) + b.text } %&gt;
       &lt;% end %&gt;
+      &lt;%= render(&#39;shared/errors&#39;, model_obj: @category) if @category %&gt;
+      &lt;% new_category = @new_category ? @new_category : &quot;&quot; %&gt;
+      &lt;%= label_tag :new_category, &quot;Create a new category: &quot; %&gt;
+      &lt;%= text_field_tag :new_category, new_category %&gt;
     &lt;/div&gt;
     &lt;%= f.submit class: &#39;btn btn-primary&#39;%&gt;
   &lt;% end %&gt;
 &lt;/div&gt;
</code></p>

<p><a name='vote_deletion'></a></p>

<h3 id="deletion-of-a-vote">Deletion Of A Vote</h3>

<p>One user cannot vote more than once on a post or a comment through this validation in the Votes model:
<code>validates_uniqueness_of :creator, scope: [:voteable_type, :voteable_id]</code></p>

<p>What if a user voted by mistake or changed his/her mind on a particular post or comment? Adding this capability meant that I needed to do primarily two things:
- If the logged in user has voted (up or down) on a particular item, show an icon to delete the vote instead of an icon to cast a vote (the thumbs-up or thumbs-down icon)
- The vote deletion icon should call an action to delete this user&#39;s vote on that item</p>

<p>I added these by writing one helper method for each &#39;voteable&#39; model, comment, and post. Shown below is the one for comment (the more complex of the two). The one for post is very similar.
<figure class='code'><figcaption><span>/app/helpers/application_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def link_based_on_current_users_vote_on_comment(comment_object, value)</span>
</span><span class='line'><span class="sr">    if Vote.find_by(creator: current_user, vote: value, voteable: comment_object)</span>
</span><span class='line'><span class="sr">      link_to vote_destroy_post_comment_path(comment_object.post, comment_object), method: &amp;#39;delete&amp;#39; do</span>
</span><span class='line'><span class="sr">        &amp;quot;&lt;i class=&#39;icon-fire&#39;&gt;&lt;/i</span><span class="o">&gt;&amp;</span><span class="n">quot</span><span class="p">;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">icon</span> <span class="o">=</span> <span class="n">value</span> <span class="p">?</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="o">&lt;</span><span class="n">i</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;icon-thumbs-up&#39;</span><span class="o">&gt;&lt;</span><span class="sr">/i&gt;&amp;quot; : &amp;quot;&lt;i class=&#39;icon-thumbs-down&#39;&gt;&lt;/i</span><span class="o">&gt;&amp;</span><span class="n">quot</span><span class="p">;</span>
</span><span class='line'>      <span class="n">link_to</span> <span class="n">vote_post_comment_path</span><span class="p">(</span><span class="n">comment_object</span><span class="o">.</span><span class="n">post</span><span class="p">,</span> <span class="n">comment_object</span><span class="p">,</span> <span class="ss">vote</span><span class="p">:</span> <span class="n">value</span><span class="p">),</span> <span class="nb">method</span><span class="p">:</span> <span class="o">&amp;</span><span class="c1">#39;post&amp;#39; do</span>
</span><span class='line'>        <span class="n">icon</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s2">&quot;text&quot;</span><span class="o">&gt;</span><span class="no">Using</span> <span class="n">this</span> <span class="n">helper</span> <span class="nb">method</span> <span class="k">in</span> <span class="n">the</span> <span class="n">view</span> <span class="n">template</span> <span class="n">is</span> <span class="n">illustrated</span> <span class="ss">below</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure> Ruby \_comments.html.erb
  &lt;% if logged_in? %&gt;
    &lt;%= link_based_on_current_users_vote_on_comment(comment, true) %&gt;
    &lt;br&gt;
  &lt;% end %&gt;
  &lt;%= &quot;&lt;strong&gt;#{comment.vote_count}&lt;/strong&gt; &lt;small&gt;(#{pluralize(comment.votes.size, &quot;Vote&quot;)})&lt;/small&gt;&quot;.html_safe %&gt;
  &lt;% if logged_in? %&gt;
    &lt;br&gt;
    &lt;%= link_based_on_current_users_vote_on_comment(comment, false) %&gt;
  &lt;% end %&gt;
</code></pre></div>
<p>The images below show the conditional rendering:</p>

<table><thead>
<tr>
<th style="text-align: center">When user has not voted on the item</th>
<th style="text-align: center">When the user has voted &#39;up&#39; an item</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center"><img src="/images/Votes_no_delete.JPG" alt="Vote Box No Delete"></td>
<td style="text-align: center"><img src="/images/Votes_with_delete.JPG" alt="Vote Box No Delete"></td>
</tr>
</tbody></table>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
</feed>
