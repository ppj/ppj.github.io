<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tdd | Learning Ruby]]></title>
  <link href="http://ppj.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2015-06-03T12:50:11+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Takeaways From Course 3 - Part 1]]></title>
    <link href="http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-1/"/>
    <updated>2015-06-03T10:55:35+10:00</updated>
    <id>http://ppj.github.io/blog/2015/06/03/takeaways-from-course-3-part-1</id>
    <content type="html"><![CDATA[<p>These are some key takeaways from the <a href="http://www.gotealeaf.com/curriculum#!production-apps">3rd course</a> for me based on the reviews i received from the TAs for every module (aka Week).</p>

<p>This is my beginner-TDD phase, so a lot these pertain to that in general and RSpec in specific(!), since that is what will be used in the course as the testing framework.</p>

<!--more-->

<h3 id="module-1">Module 1</h3>

<ul>
<li>Show success or failure flash-messages when handling post requests to notify the user</li>
<li>Standard validations on a models attribute can be written in a single line, like this:<br>
<code>validates :email, length: {minimum: 5}, uniqueness: true</code>
Whether it should be done or not depends on how much it affects readability</li>
<li>Why (it used to be necessary to) end a file with a blank line? <a href="http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline">Read here</a>.</li>
</ul>

<h3 id="module-2">Module 2</h3>

<ul>
<li>As a beginner-TDDer,

<ol>
<li>Start putting stuff in views assuming public interfaces of classes/models and Controller#actions. And then get into writing failing tests (first functional/controller and then unit/model).*</li>
<li>Write spec titles for as many scenarios as you can think of starting with the most obvious ones through to edge cases, <em>without over-analyzing it</em> (you can always add more tests!).</li>
<li>Start the red-green-refactor cycle in the same order.<br></li>
<li>Do not test the code you do not own. For example, whether a <code>GET</code> request to <code>books#index</code> renders the &quot;books/index.html.haml&quot; template. That is pretty much Rails&#39; responsibility!<br></li>
</ol></li>
<li>Make sure the test setup is not too far from the action and assertion in a spec. This tends to happen when using <code>let</code>, <code>let!</code>, <code>before</code> in RSpec.<br></li>
<li>Loved the use of the <a href="http://www.fabricationgem.org/">Fabrication</a> and <a href="https://github.com/stympy/faker">Faker</a> gems in generating test data!<br></li>
</ul>

<p>* <strong>Let BDD drive TDD</strong>: Outside-in development comes more naturally to me. <a href="http://webuild.envato.com/blog/making-the-most-of-bdd-part-1/">Here&#39;s a great article</a> about this approach.</p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My (Failed) Initial Experiments With TDD]]></title>
    <link href="http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd/"/>
    <updated>2014-09-03T12:10:14+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd</id>
    <content type="html"><![CDATA[<p>My better-half is a software developer with a rich experience of 10+ years. She absolutely swears by Test Driven Development (TDD). And seems to have all the right reasons for preaching it, as far as my limited knowledge goes. I read up a bit about it and watched a few screen casts too.</p>

<!-- more -->

<p>So when i was to start developing the object oriented console-based BlackJack game, i thought i&#39;d give it a shot. After all this was technically my 2nd go at developing an OO application (the TicTacToe game was the first)!</p>

<p>I installed the rspec gem, enabled color display for my PowerShell (yes i use Windows!) to actually <em>feel</em> the <em>red-green</em>-refactor cycle! I was all set. Or so i thought. I started with writing the tests for the most fundamental of the classes my problem statement gave me, the Card class. I had read that TDD is much more than writing tests first. Primarily, it should lead to evolvution your application design, and that, adhering to the SOLID principles of object oriented design. And that&#39;s where the problems began.</p>

<p>I had also read the theory about the five Object Oriented Design Principles (SOLID). Also, how it can (is supposed to) ensure low-coupling and high-cohesion between classes. This is where my inexperience in OOP started showing up. </p>

<p>I forced myself to move from the Card class to the Deck class. I continued using TDD to develop it. But i just could not use TDD to continue to develop the app! I could not see how TDD would help me take the program further! I even asked my wife to show me how she would do it (for a couple of sessions at least). That didn&#39;t help much either.</p>

<p>Finally after much frustration, arguments and some more reading up i decided not to muddle my learning with TDD <em>for now</em>.</p>

<p>One article that helped me reach this conclusion: <a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html"><strong>The Failures of &quot;Intro to TDD&quot;</strong></a>. Especially the introduction and the last two sections.</p>

<p>Also, my course instructor at TeaLeaf helped me understand the reasons of not using TDD at an early stage of learning OOP&#8230; which are what i have talked about above. I will not experiment much with it before i start the third course which talks in depth about the SOLID principles. Moreover, it is expected to be completed using TDD through-out.</p>

<div id="disqus_thread"></div>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<p><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></p>
]]></content>
  </entry>
  
</feed>
