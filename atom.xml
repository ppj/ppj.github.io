<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Ruby]]></title>
  <link href="http://ppj.github.io/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2014-09-17T14:38:11+10:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails References]]></title>
    <link href="http://ppj.github.io/blog/2014/09/16/rails-references/"/>
    <updated>2014-09-16T10:15:46+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/16/rails-references</id>
    <content type="html"><![CDATA[<p>I just started the <a href="http://www.gotealeaf.com/curriculum#!rails">second</a> of the 3 <a href="http://www.gotealeaf.com/">TeaLeaf</a> courses for back-end web-application development using Ruby on Rails.</p>

<!-- more -->

<p>The last exercise in Course 1 was an introduction to web-app development in Ruby using the Sinatra framework. Rails, as I understand so far, is a much more intense framework as compared to Sinatra. So, it has a much steeper learning curve. All the more true, for a web-app newbie.</p>

<div>Here, I have listed some resources to start learning and revising my Rails knowledge:</div>

<ol>
<li><div><a href='http://guides.rubyonrails.org/getting_started.html'>The getting started guide</a>: This is great for as a first-time Rails tutorial&#8230; just power through as many things will not make much sense! This page has links to more detailed descriptions of the concepts; some important ones are:</div>

<ul>
<li><a href="http://guides.rubyonrails.org/migrations.html">Rails Database Migrations</a></li>
<li><a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Layouts And Rendering In Rails</a></li>
<li><a href="http://guides.rubyonrails.org/association_basics.html">Active Record Associations</a></li>
</ul></li>
<li><p><a href="https://www.railstutorial.org/book">The Rails Tutorial (Book)</a>: A good comprehensive tutorial for beginners and also to refresh the Rails basics!</p></li>
</ol>

<h3 class='no_extra_new_line'>Related Repos:</h3>

<ul>
<li><a href="https://github.com/ppj/railsBlog">Rails Blog</a></li>
<li><a href="https://github.com/ppj/railsAssociationsTrial">Rails Association Trials</a></li>
</ul>

<h3 class='no_extra_new_line'>Major Takeaways:</h3>

<ul>
<li>The first few things to look at in a pre-existing Rails app&#39;s code

<ul>
<li>./Gemfile: Gives an idea of the complexity of the app based on the variety of gems it depends on</li>
<li>./config/routes.rb: Has code to generate various routes the app has</li>
<li>use <code>rake routes</code> or <APP_HOMEPAGE>\rails\info route to list various routes</li>
<li>./config/database.yml: database related info </li>
</ul></li>
<li>Rails has a lot of &quot;magic&quot; going on in the background owing mainly to its conventions (expectations and auto creation of files &amp; code based on a single line of code / shell command)</li>
<li>For the same reason, lot of hands-on practice would be needed to get used to all (or most) things going on in rails, ranging from folder &amp; file structure to more advanced features</li>
<li><code>rails generate ...</code> should be used sparingly as it can be confusing and/or redundant (generates lot of unnecessary files/code)</li>
<li>no data from the database is actually pushed to Git (.gitignore file is set to ignore the default db&#39;s &#39;.sqlite3&#39; files for git operations)

<ul>
<li>the migration file and schema.rb which is modified by the <code>rake db:migrate</code> command is what goes into the repository</li>
</ul></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing Web-based BlackJack]]></title>
    <link href="http://ppj.github.io/blog/2014/09/04/developing-web-based-blackjack/"/>
    <updated>2014-09-04T12:24:46+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/04/developing-web-based-blackjack</id>
    <content type="html"><![CDATA[<p>So, i am finally done developing the web-version of the BlackJack game! Like i mentioned in the previous post, it was suggested in the TeaLeaf course to use procedural programming to keep it simple and focused on web application development learning!</p>

<!-- more -->

<p>Quoted below are the reasons for two major simplifications adopted in this first web-app development exercise -</p>

<div><strong>Why procedural programming instead of OOP</strong>:</div>

<blockquote>
<p>We chose to not use OOP to manage our code. We&#39;ve seen that many people get stuck on OOP and can&#39;t move forward, and we want people to focus on web development and primary, HTTP in this lesson.  </p>
</blockquote>

<div><strong>Why simpler session-based persistence (cookies) instead of databases:</strong></div>

<blockquote>
<p>We chose to not include databases in this section, and instead chose to use the session, which is cookie-backed, for cheap persistence. Again, the reason is because many people get stuck on database concepts, which are important, but we want to direct focus on dealing with HTTP.  </p>
</blockquote>

<p>Relational database will be introduced and used in the subsequent TeaLeaf courses.</p>

<h3 class='no_extra_new_line'>Sinatra Files/Folder Structure for <a href="https://github.com/ppj/blackjack_web"><em>My</em> App</a>:</h3>

<ul>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/main.rb"><em>main.rb</em></a>: the main Ruby file with handlers for the HTTP requests</li>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/config.ru"><em>config.ru</em></a>: Sinatra settings and launcher file

<ul>
<li>use <code>rackup -p ABCD</code> to initiate a local WeBrick server @ port <em>ABCD</em> (defaults to 9292)<br></li>
</ul></li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public"><strong>public</strong></a>

<ul>
<li>stores <a href="https://github.com/ppj/blackjack_web/blob/master/public/application.js">custom JavaScript</a> and <a href="https://github.com/ppj/blackjack_web/blob/master/public/application.css">CSS</a> <em>files</em> </li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public/images"><strong>images</strong></a>: stores the image files used in the app</li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public/vendor"><strong>vendor</strong></a>: can store third party &#39;plugins&#39;, like Twitter-Bootstrap files<br></li>
</ul></li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/views"><strong>views</strong></a>

<ul>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/views/layout.erb"><em>layout.erb</em></a>: default (but customizable) erb layout to encompass the other erb templates in</li>
<li>other erb templates (use <code>, :layout false</code> while rendering to avoid embedding these in the <em>layout.erb</em>)</li>
</ul></li>
</ul>

<h3 class='no_extra_new_line'>Thumb Rules Followed:</h3>

<ul>
<li><code>/GET</code> requests generally render &#39;.erb&#39; (<strong>E</strong>mbedded <strong>R</strong>u<strong>b</strong>y HTML templates)</li>
<li><code>/POST</code> requests generally <code>redirect</code> to another request (typically a <code>\GET</code> request handler)</li>
</ul>

<h3 class='no_extra_new_line'>Salient Features:</h3>

<ul>
<li>Empty string or blank spaces not allowed as player name</li>
<li>Initial chip-count or bet cannot be empty/blank, non-numeric, or &gt; remaining chips</li>
<li>Auto adjusts bet amount if set &gt; remaining chips and warns player accordingly</li>
<li>Using the <code>session</code> hash the app remembers the following:

<ul>
<li>last player&#39;s name</li>
<li>previous bet amount</li>
</ul></li>
<li>Tracks and displays chip-count on the round, and betting pages</li>
<li>Player wins - message in green</li>
<li>Player loses - message in red</li>
<li>Game pushes (ties) - message in blue</li>
<li>&quot;AJAXified&quot; the Hit, Stay and Dealer Next Card buttons - avoids reloading the entire page</li>
</ul>

<h3 class='no_extra_new_line'>Key Takeaways:</h3>

<ul>
<li>the difference between client side vs server side code</li>
<li>what the DOM means and how to use jQuery to manipulate it</li>
<li>unobtrusive JavaScript, and AJAX: when, and how, to use them</li>
<li>dealing with re-binding issues when the DOM changes (the green highlighted lines are preferred over the red highlighted ones in the AJAX code below)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$(document).ready(function() {
</span><span class='line'>
</span><span class='line'><span class="gd">- $(&#39;#hit_form input&#39;).click(function() {</span>
</span><span class='line'><span class="gi">+ $(document).on(&#39;click&#39;, &#39;#hit_form input&#39;, function() {</span>
</span><span class='line'>
</span><span class='line'>    $.ajax({
</span><span class='line'>      type: &#39;POST&#39;,
</span><span class='line'>      url: &#39;/round/player/hit&#39;
</span><span class='line'>    }).done(function(msg) {
</span><span class='line'>
</span><span class='line'><span class="gd">-     $(&#39;#game_area&#39;).html(msg);</span>
</span><span class='line'><span class="gi">+     $(&#39;#game_area&#39;).replaceWith(msg);</span>
</span><span class='line'>
</span><span class='line'>    });
</span><span class='line'>    // prevent from further execution of the route
</span><span class='line'>    return false; // or event.preventDefault();
</span><span class='line'>  });
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure></li>
</ul>

<h3 class='no_extra_new_line'>Other Notes:</h3>

<ul>
<li>The equivalent of ShotGun gem for Windows is the Sinatra/Reloader gem. Both enable on the fly changes to the code; i.e. the local server instance need not be restarted to see the changes made to the code, a simple page refresh is enough once the changes are saved.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">RUBY_PLATFORM</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;w32&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;sinatra/reloader&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Look at Basics of Web Development]]></title>
    <link href="http://ppj.github.io/blog/2014/09/03/my-first-look-at-basics-of-web-development/"/>
    <updated>2014-09-03T14:40:34+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/03/my-first-look-at-basics-of-web-development</id>
    <content type="html"><![CDATA[<p>This calls for a brief pause from learning/practicing OOP. The focus of this exercise is getting to know the underlying concepts of how the web works.</p>

<!-- more -->

<div>Below are links to decent tutorials/articles about the same:</div>

<ul>
<li><a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">HTTP</a></li>
<li><a href="http://www.codecademy.com/tracks/htmlcss">HTML &amp; CSS</a></li>
<li><a href="http://www.sinatrarb.com/intro.html">Sinatra</a></li>
<li><a href="http://d1b1wr57ag5rdp.cloudfront.net/web_solutions/sinatra_mvc_request_response.pdf">Request/Response MVC</a></li>
</ul>

<div>At the end of this exercise, I should have a fair idea about&#8230;</div>

<ul>
<li>how the web server handles the requests from the client (typically, a web browser)</li>
<li>how the web server issues responses back to the client</li>
<li>how to simulate a &#39;stateful&#39; experience using a stateless protocol using browser cookies<br>
The more traditional way is to use a database, but that is a bigger topic which is why it should be avoided for now.</li>
</ul>

<p>Once i familiarize myself with the above, i should put the knowledge to use by developing a web-version of &#8230;<br>
&#8230;&#8230; drum-roll &#8230;..<br>
yes &#8230;&#8230; the BlackJack game!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My (Failed) Initial Experiments With TDD]]></title>
    <link href="http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd/"/>
    <updated>2014-09-03T12:10:14+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd</id>
    <content type="html"><![CDATA[<p>My better-half is a software developer with a rich experience of 10+ years. She absolutely swears by Test Driven Development (TDD). And seems to have all the right reasons for preaching it, as far as my limited knowledge goes. I read up a bit about it and watched a few screen casts too.</p>

<!-- more -->

<p>So when i was to start developing the object oriented console-based BlackJack game, i thought i&#39;d give it a shot. After all this was technically my 2nd go at developing an OO application (the TicTacToe game was the first)!</p>

<p>I installed the rspec gem, enabled color display for my PowerShell (yes i use Windows!) to actually <em>feel</em> the <em>red-green</em>-refactor cycle! I was all set. Or so i thought. I started with writing the tests for the most fundamental of the classes my problem statement gave me, the Card class. I had read that TDD is much more than writing tests first. Primarily, it should lead to evolvution your application design, and that, adhering to the SOLID principles of object oriented design. And that&#39;s where the problems began.</p>

<p>I had also read the theory about the five Object Oriented Design Principles (SOLID). Also, how it can (is supposed to) ensure low-coupling and high-cohesion between classes. This is where my inexperience in OOP started showing up. </p>

<p>I forced myself to move from the Card class to the Deck class. I continued using TDD to develop it. But i just could not use TDD to continue to develop the app! I could not see how TDD would help me take the program further! I even asked my wife to show me how she would do it (for a couple of sessions at least). That didn&#39;t help much either.</p>

<p>Finally after much frustration, arguments and some more reading up i decided not to muddle my learning with TDD <em>for now</em>.</p>

<p>One article that helped me reach this conclusion: <a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html"><strong>The Failures of &quot;Intro to TDD&quot;</strong></a>. Especially the introduction and the last two sections.</p>

<p>Also, my course instructor at TeaLeaf helped me understand the reasons of not using TDD at an early stage of learning OOP&#8230; which are what i have talked about above. I will not experiment much with it before i start the third course which talks in depth about the SOLID principles. Moreover, it is expected to be completed using TDD through-out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Object Oriented Application(s): Console Based Black Jack]]></title>
    <link href="http://ppj.github.io/blog/2014/09/01/my-first-object-oriented-application-s-console-based-black-jack/"/>
    <updated>2014-09-01T13:36:33+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/01/my-first-object-oriented-application-s-console-based-black-jack</id>
    <content type="html"><![CDATA[<p>Before i developed the console-based Black Jack, i tried developing a slightly simpler game, also console based: Tic-Tac-Toe. Here are the problem statements for both the apps:</p>

<!-- more -->

<h2 id="problem-statement-for-tic-tac-toe:">Problem Statement for Tic-Tac-Toe:</h2>

<p>On an empty board of 3x3 squares, a player and the computer (or another player) pick empty squares to put their <code>X</code> or <code>O</code> (symbols) in. The first one to have their symbols in a row (or column or diagonal) of 3 wins.</p>

<h3 class='no_extra_new_line'>Extracted Nouns:</h3>

<ul>
<li>Board</li>
<li>Square (or Position)</li>
<li>Player (this would also address the other player/computer?)</li>
<li>Game (that would be the engine)</li>
</ul>

<p>Note: The Tic-Tac-Toe code can be a perfect foundation for a &quot;connect-4&quot; game!
  &#8230; or even a &#39;expandable&#39; version of Tic-Tac-Toe (4x4, 5x5, etc.)!!</p>

<h2 id="problem-statement-for-blackjack:">Problem Statement for BlackJack:</h2>

<p>BlackJack is a card game played between a dealer and player(s). The dealer starts out with dealing 2 cards from a deck to each player. A player wins if he/she hits a BlackJack (score of 21), unless the dealer has also hit a BlackJack. If neither have hit a BlackJack, player can choose to hit (get dealt another card) till he/she decides to stop/stay, scores 21, or loses (scores more than 21). If the player decides to stay (i.e. &lt; 21), next player chooses to hit or stay. If no player hits a BlackJack, dealer can choose to hit (draw one card at a time) till he/she loses (&gt;21), reaches 17, or wins (hits BlackJack). If dealer reaches anywhere between (&gt;=) 17 and (&lt;) 21, the highest scorer wins.</p>

<h3 id="class-design:">Class Design:</h3>

<table><thead>
<tr>
<th>Nouns</th>
<th>Properties</th>
<th>Behaviours</th>
</tr>
</thead><tbody>
<tr>
<td>BlackJack</td>
<td>dealer, Player, Deck</td>
<td>check_winner? game-sequence</td>
</tr>
<tr>
<td>Deck</td>
<td>cards</td>
<td>pop_out_card (to be dealt/drawn), shuffle_cards</td>
</tr>
<tr>
<td>Card</td>
<td>suit, denomination</td>
<td>value</td>
</tr>
<tr>
<td>Dealer</td>
<td>hand(of cards)</td>
<td>deal_card (or/and draw_card to self), hit, stay</td>
</tr>
<tr>
<td>Player</td>
<td>hand(of cards)</td>
<td>hit, stay</td>
</tr>
<tr>
<td>Hand</td>
<td>cards, total</td>
<td>calculate_total, busted?, display</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Before Developing My First Object Oriented Application: Notes to Self]]></title>
    <link href="http://ppj.github.io/blog/2014/08/19/before_developing-my-first-object-oriented-application-notes-to-self/"/>
    <updated>2014-08-19T13:23:18+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/19/before_developing-my-first-object-oriented-application-notes-to-self</id>
    <content type="html"><![CDATA[<p>These are generic notes made when i learnt the basics of Object Oriented programming using Ruby.</p>

<!-- more -->

<ul>
<li>Modules can reference public instance methods of the class, for e.g.</li>
</ul>

<figure class='code'><figcaption><span>Modules Referencing Instance Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Walkable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> is walking&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span> <span class="no">Dog</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Walkable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>The above will work ONLY if the class that implements the module Walkable has a public method <code>name</code> (which is a getter in this case).
<em>It is a good practice to put a comment to that effect where the module is defined.</em></p>

<ul>
<li><p>Only two things evaluate to the boolean <code>false</code> in Ruby, they are a null object <code>nil</code> and <code>false</code></p></li>
<li><p>Every expression returns something in Ruby.
The return value is shown after an hash-rocket sign <code>=&gt;</code> in an IRB session after executing a
line of code.</p></li>
<li><p>It&#39;s a good idea to just return a string from a method and then using <code>puts</code> on the method call to display the desired string rather than doing a <code>puts</code> in the method itself.</p></li>
</ul>

<ul>
 <li><a href='http://www.skorks.com/2009/09/ruby-exceptions-and-exception-handling'>Exceptions in Ruby</a></li>
 <ul>
 <li><a href='http://stackoverflow.com/questions/1485114/ruby-constructors-and-exceptions'>Raising exceptions during object instansiation</a></li>
 </ul>
</ul>

<ul>
<li>A good way to start developing/design an OO application is following the steps below:

<ol>
<li>Write the problem statement for the application</li>
<li>Extract nouns from the problem statement: can be good indicators for required classes</li>
<li>Extract verbs and associate them with the nouns: can be good indicators of required methods and responsibilities</li>
</ol></li>
</ul>

<p>Note: The above method was put to use <a href="http://ppj.github.io/blog/2014/09/01/my-first-object-oriented-application-s-console-based-black-jack/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Writing a (Procedural) Program]]></title>
    <link href="http://ppj.github.io/blog/2014/08/18/how-to-start-writing-a-procedural-program/"/>
    <updated>2014-08-18T13:13:27+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/18/how-to-start-writing-a-procedural-program</id>
    <content type="html"><![CDATA[<p>I have starter trouble&#8230; always. I either spend way too much time &#39;planning&#39; and &#39;collecting information&#39; when i want to start something new, or, the other extreme (but less often), just dive right into it and then suffer due to under preparation.</p>

<!-- more -->

<p>The fundamental technique i learnt during the first course in the first <a href="http://www.gotealeaf.com/">TeaLeaf</a> course on Ruby basics was how to start writing a program. In other words, how much preparation is just enough to start writing a procedural program.</p>

<p>A quick side-note: Although, procedural programming is (almost) a thing of the past, and all for the right reasons, it is still a great way to start learning programming IMO. The primary reason, i believe, is our brains are wired to think sequentially or serially: first do this, then get the result, then do that&#8230; and so on. At least mine is.</p>

<p>So to get over that starting trouble, the technique to start writing a program that best helped me is writing psuedo-code. &quot;Pseudo&quot; as in made up syntax, not bother about whether it will run, because it will not! The psuedo-code is almost plain English, or very close to it. Just enough to guide you in writing the actual code.</p>

<p>Just jot down the logical steps (loops, conditionals, operations) you think are required to solve the programming problem. One rule i stuck to when doing this exercise is: use consistent indentation for readability.</p>

<p>As an example, this is the psuedo code i wrote for a console-based player-vs-computer Tic-Tac-Toe game:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Start with an empty 3x3 board
</span><span class='line'>until board full or winner
</span><span class='line'>  ask player to chose empty square to mark his/her 'X'
</span><span class='line'>  display board
</span><span class='line'>  if player won?
</span><span class='line'>    announce winner and end game
</span><span class='line'>  else if board full?
</span><span class='line'>    end game
</span><span class='line'>  else
</span><span class='line'>    generate a random number and let the computer choose an empty square to mark its 'O'
</span><span class='line'>  end
</span><span class='line'>  display board
</span><span class='line'>  if computer won
</span><span class='line'>    announce winner and end game
</span><span class='line'>  elsif board full?
</span><span class='line'>    end game
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

<div>Some features of this technique are:</div>

<ul>
<li>it highlights my logic of developing a solution</li>
<li>it helps to keep focus on the current coding task</li>
<li>it helps to bring focus back to the next coding task if the previous one took longer than normal for whatever reasons (new language, syntactical errors)</li>
<li>it need not be perfect (or updated all the time for small changes in the actual implementation)</li>
<li>The final Ruby code for this simple application (if it can be called that!) can be found <a href="https://github.com/ppj/tealeaf1_Lesson1/blob/master/tic_tac_toe.rb">here</a> </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Ruby Code With the Pry Gem]]></title>
    <link href="http://ppj.github.io/blog/2014/08/11/debugging-ruby-code-with-the-pry-gem/"/>
    <updated>2014-08-11T09:49:00+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/11/debugging-ruby-code-with-the-pry-gem</id>
    <content type="html"><![CDATA[<p>This is a quick reference guide for using ‘pry’ gem for debugging Ruby code.</p>

<!-- more -->

<h3 class='no_extra_new_line'>Installation:</h3>

<ul>
<li><code>gem list pry</code>: lists whether it is already installed<br></li>
<li><code>gem install pry</code>: installs the pry gem</li>
</ul>

<h3 class='no_extra_new_line'>Use:</h3>

<ol>
<li><code>require &#39;pry&#39;</code>

<ul>
<li>insert the above line at the top of the ruby file you intend to debug</li>
</ul></li>
<li><code>binding.pry</code>

<ul>
<li>insert the above line to stop execution at a particular point in the code</li>
<li>insert this after the line where you want to pause the program execution</li>
</ul></li>
<li>run the program

<ul>
<li>type the debugging stuff (variable names, method names etc.) once the program pauses</li>
</ul></li>
<li><code>step</code>

<ul>
<li>type ‘step’ to go to the next line</li>
</ul></li>
<li>Ctrl+D

<ul>
<li>use the above key combo to move to the next ‘binding.pry’ statement in the program</li>
</ul></li>
</ol>

<p><a href="http://knomedia.github.io/blog/2013/01/21/debugging-ruby-with-pry">Here’s a good screen cast</a> describing the debugging features of Pry.</p>

<p>However, debugging is just one of the many things that can be done using Pry. One other main feature is replacing IRB. A good reference page (with screen-casts and all) can be found <a href="http://pryrepl.org/">here</a>.</p>

<h3 class='no_extra_new_line'>Other useful links:</h3>

<ul>
<li><a href="https://rubygems.org/gems/pry-doc">Latest Pry &amp; Documentation</a></li>
<li><a href="https://github.com/pry/pry/wiki">Pry WiKi on GitHub</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Post!]]></title>
    <link href="http://ppj.github.io/blog/2014/08/10/my-first-blog-post/"/>
    <updated>2014-08-10T18:24:06+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/10/my-first-blog-post</id>
    <content type="html"><![CDATA[<p>As the title suggests&#8230;</p>

<!-- more -->

<p>Some would say i am too late to jump on the bandwagon. In my defense, i am lazy!</p>

<p>What made me start writing a blog is this Ruby (and Rails) programming course series from <a href="http://www.gotealeaf.com/">TeaLeaf</a>. At the time of writing this, I am almost about to finish the first of the three courses.</p>

<p>So, at least to start with, i will be writing mostly about my learnings during the course(s) and related stuff, posting links to websites, screen-casts that i find interesting, and of course, my 2 cents about the related stuff.</p>

<p>As i start out, the primary aim for this blog would be to serve me (and other similarly-abled people) as a reference to the tips/tricks i would be learning and discovering as i progress. Nothing more to that, i guess. But who knows, it might have a bit of digression every once in a while.</p>
]]></content>
  </entry>
  
</feed>
