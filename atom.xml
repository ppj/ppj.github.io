<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Ruby]]></title>
  <link href="http://ppj.github.io/atom.xml" rel="self"/>
  <link href="http://ppj.github.io/"/>
  <updated>2014-10-06T16:12:51+11:00</updated>
  <id>http://ppj.github.io/</id>
  <author>
    <name><![CDATA[Prasanna Joshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quiz for Rails Beginners 2]]></title>
    <link href="http://ppj.github.io/blog/2014/10/06/quiz-for-rails-beginners-2/"/>
    <updated>2014-10-06T13:49:13+11:00</updated>
    <id>http://ppj.github.io/blog/2014/10/06/quiz-for-rails-beginners-2</id>
    <content type="html"><![CDATA[<p>Here&#39;s the second quiz for people who are just getting started learning web-application development. This focuses more on the resources routes and related concepts in Rails.</p>

<!-- more -->

<p>Each question is a link pointing to my corresponding answer as i understand the concepts the today.</p>

<ol>
<li><p><a name='q1'></a><a href="#a1">Name all the 7 (or 8) routes exposed by the <code>resources</code> keyword in the <code>routes.rb</code> file. Also name the 4 named routes, and how the request is routed to the controller/action.</a></p></li>
<li><p><a name='q2'></a><a href="#a2">What is REST and how does it relate to the <code>resources</code> routes?</a></p></li>
<li><p><a name='q3'></a><a href="#a3">What&#39;s the major difference between model backed and non-model backed form helpers?</a></p></li>
<li><p><a name='q4'></a><a href="#a4">How does <code>form_for</code> know how to build the <code>&lt;form&gt;</code> element?</a></p></li>
<li><p><a name='q5'></a><a href="#a5">What&#39;s the general pattern we use in the actions that handle submission of model-backed forms (ie, the <code>create</code> and <code>update</code> actions)?</a></p></li>
<li><p><a name='q6'></a><a href="#a6">How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?</a></p></li>
<li><p><a name='q7'></a><a href="#a7">What are Rails helpers?</a></p></li>
<li><p><a name='q8'></a><a href="#a8">What are Rails partials?</a></p></li>
<li><p><a name='q9'></a><a href="#a9">When do we use partials vs helpers?</a></p></li>
<li><p><a name='q10'></a><a href="#a10">When do we use non-model backed forms?</a></p></li>
</ol>

<h3 id="my-answers:">MY ANSWERS:</h3>

<p><a name='a1'></a>
<strong>A1</strong>: Having <code>resources :dogs</code> in the block in the routes.rb file is going to give us the following routes</p>

<table><thead>
<tr>
<th>Prefix</th>
<th>Verb</th>
<th>URI Pattern</th>
<th>Controller#Action</th>
</tr>
</thead><tbody>
<tr>
<td>dogs</td>
<td>GET</td>
<td>/dogs(.:format)</td>
<td>dogs#index</td>
</tr>
<tr>
<td></td>
<td>POST</td>
<td>/dogs(.:format)</td>
<td>dogs#create</td>
</tr>
<tr>
<td>new_dog</td>
<td>GET</td>
<td>/dogs/new(.:format)</td>
<td>dogs#new</td>
</tr>
<tr>
<td>edit_dog</td>
<td>GET</td>
<td>/dogs/:id/edit(.:format)</td>
<td>dogs#edit</td>
</tr>
<tr>
<td>dog</td>
<td>GET</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#show</td>
</tr>
<tr>
<td></td>
<td>PATCH</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#update</td>
</tr>
<tr>
<td></td>
<td>PUT</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#update</td>
</tr>
<tr>
<td></td>
<td>DELETE</td>
<td>/dogs/:id(.:format)</td>
<td>dogs#destroy</td>
</tr>
</tbody></table>

<p><a href="#q1">Back</a></p>

<p><a name='a2'></a>
<strong>A2</strong>: REST (<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer) is a way to maintain data persistence in <strong>stateless</strong> data-transfer protocol (which is HTTP in our case). The <code>resources</code> keyword in the routes.rb file creates the most used 7 routes (listed above) in a Rails application. These routes are RESTful because they conform to the <a href="http://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints">REST architectural constraints</a> for web application development. 
<a href="#q2">Back</a></p>

<p><a name='a3'></a>
<strong>A3</strong>: The major difference is a model-backed helper requires, and directly works on, a ActiveRecord Model object for creation of equivalent HTML tags. This is makes it very tightly integrated with the model object and it&#39;s attributes. A non-model backed helper is a more generic helper to create HTML tags and do not need any ActiveRecord Model object to work on.<br>
<a href="#q3">Back</a></p>

<p><a name='a4'></a>
<strong>A4</strong>: Because the <code>form_for</code> is a model-backed form helper, it takes an ActiveRecord Model object to create an HTML form for using the model object&#39;s real and virtual attributes.<br>
<a href="#q4">Back</a></p>

<p><a name='a5'></a>
<div><strong>A5</strong>: The general pattern we use in actions that handle model-backed form submission is:</div>
<ol>
  <li>Create/Update Model Object in Memory</li>
  <li>Try to save it in the database</li>
  <li>If the save succeeds, redirect to the relevant page (showing the saved item by itself or in a list)</li>
  <li>If the save fails, render the page that submitted the form again, with the error messages (stored on the in-memory object) displayed</li>
</ol>
The equivalent code for the create action of the Comments controller would look like
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@category</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@category</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;New category created.&#39;</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">categories_path</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<a href="#q5">Back</a></p>

<p><a name='a6'></a>
<div><strong>A6</strong>:</div>
<ul class='no_extra_new_line'>
  <li>Model validations are triggered when the database is accessed for update, for e.g. the <code>save</code> or <code>create</code> methods are called on a model object</li>
  <li>f there are validation errors triggered during the above operation, they are saved on the model object itself which can be accessed by calling <code>#errors</code> on it</li>
  Note: model_obj.errors.full_messages can be used to retrieve an array of error messages
  <li>This object cab be saved in an instance variable of the controller class and then can be used in the rendered template to display errors as shown below</li>
</ul>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="n">model_obj</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=&#39;row&#39;&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;alert alert-error span8&#39;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">h5</span><span class="o">&gt;</span><span class="no">Please</span> <span class="n">fix</span> <span class="n">the</span> <span class="n">errors</span> <span class="n">below</span> <span class="n">to</span> <span class="n">submit</span> <span class="ss">successfully</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/h5&gt;</span>
</span><span class='line'><span class="sr">      &lt;ol&gt;</span>
</span><span class='line'><span class="sr">        &lt;% model_obj.errors.full_messages.each do |msg| %&gt;</span>
</span><span class='line'><span class="sr">          &lt;li&gt;&lt;%= msg %&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">      &lt;/ol&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<a href="#q6">Back</a></p>

<p><a name='a7'></a>
<strong>A7</strong>: Rails helpers are methods that can be defined to contain repetitive logic for the presentation layer (used by the view templates). These helper methods usually go in the <code>app\helpers\application_helper.rb</code> file under the Rails project folder.<br>
<a href="#q7">Back</a></p>

<p><a name='a8'></a>
<strong>A8</strong>: Rails partials are HTML snippets which need to be reused in many view templates with no or minimum modifications (that can be handled by arguments). Filenames for partials begin with an <code>_</code>, for example: <code>_errors.html.erb</code>. This partial can be used by calling the render method on it, as in <code>&lt;%= render &#39;shared/errors&#39;, model_obj: @post %&gt;</code> where <code>model_obj</code> is an argument variable name that will be used in the partial (refer to the HTML code in <a href="#a6">Answer 6</a> above).<br>
<a href="#q8">Back</a></p>

<p><a name='a9'></a>
<strong>A9</strong>: Partials should be preferred over helpers when too much HTML needs to be embedded. Helpers should be reserved more for the logic (parsing / reformating / calculations) than the presentation itself.<br>
<a href="#q9">Back</a></p>

<p><a name='a10'></a>
<strong>A10</strong>: Non-model backed form helpers should be used whenever user-input elements need to be generated for properties which are not the associated attributes of an ActiveRecord Model object.<br>
<a href="#q10">Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Rails: RDBMS, Associations, Resources]]></title>
    <link href="http://ppj.github.io/blog/2014/09/25/getting-started-with-rails/"/>
    <updated>2014-09-25T14:27:22+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/25/getting-started-with-rails</id>
    <content type="html"><![CDATA[<p><a name='top'></a></p>

<div>Concepts covered in the first session of the <a href='http://www.gotealeaf.com/curriculum#!rails'>&#8216;Rapid Prototyping with Ruby on Rails&#8217;</a> course at <a href='http://www.gotealeaf.com/'>TeaLeaf Academy</a>:</div>

<ul>
<li><a href="#rdbms">Basics of Relational Databases</a></li>
<li><a href="#ar">ActiveRecord</a></li>
<li><a href="#mig">Migrations</a></li>
<li><a href="#assoc">Associations (1:M and M:M)</a></li>
<li><a href="#res">Resources</a></li>
</ul>

<!-- more -->

<p><a name='rdbms'></a>  </p>

<h3 class='no_extra_new_line'>Basics of Relational Databases</h3>

<ul>
<li>A single table in a relational db, in its simplest form, can be imagined to be like a spread-sheet (rows and columns)</li>
<li>Each column has a title (attribute) and can store only one predefined type of data (integer, string, boolean, &#8230;) and this is where it differs from a generic spreadsheet</li>
<li>Each row represents the data stored in the form of attribute values as per the columns</li>
<li>Each row is identified by a unique integer attribute called the &#39;primary_key&#39; of the table</li>
<li>There can be multiple (linked or unlinked) tables in the database, just like one file can have multiple spread-sheets</li>
<li>One table refers to the rows of one other table using an integer attribute called the &#39;foreign_key&#39; (see image below for illustration - Courtesy: <a href="http://publib.boulder.ibm.com">http://publib.boulder.ibm.com</a>)<br>
<img src="http://publib.boulder.ibm.com/infocenter/soliddb/v6r3/topic/com.ibm.swg.im.soliddb.sql.doc/figure/ReferentialConstraint.gif" alt="Courtesy: http://publib.boulder.ibm.com" title="Primary Key - Foreign Key"><br>
<strong>The CUST_ID is foreign key in Accounts table and primary key for the Customers table</strong></li>
<li>The foreign-key column is used to set up a 1-to-Many association between two tables (Foreign Key is on the &#39;Many&#39; table)</li>
<li>Rails offers SQLite3 as the default database (<a href="http://sqlitestudio.pl/">SQLiteStudio</a> is a good free viewer available for SQLite3 among many other free and paid ones)</li>
<li>A db table has two views

<ul>
<li><em>schema view</em>: shows the columns in each table and the type of data each column can store</li>
<li><em>data view</em>: shows the actual data in the table (much like the spread-sheet view)</li>
</ul></li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='ar'></a></p>

<h3 class='no_extra_new_line'>ActiveRecord</h3>

<ul>
<li>ActiveRecord is a pattern which helps abstract queries to the database through something called <strong>O</strong>bject <strong>R</strong>elational <strong>M</strong>apper (ORM)</li>
<li>ORM helps generate SQL queries using a Object#method syntax, for example (in Rails)

<ul>
<li>code like <code>Post.all</code> would generate an SQL query that looks like</li>
<li><code>SELECT &quot;posts&quot;.* FROM &quot;posts&quot;</code> which extracts all rows from the Post table in the database</li>
</ul></li>
<li>Each instance of an ActiveRecord Model object represents a row in the corresponding table</li>
<li>Each object has getter and setter methods for the real attributes (columns) as well as virtual attributes (created based on associations)</li>
<li>ActiveRecord in Rails is a thus a very simple, yet powerful (convenient) ORM implementation that saves lot of verbosity</li>
<li>Although not obvious to new web developers (like me :-)), but the simplicity of Rails ActiveRecord brings in a harsh limitation on Rails

<ul>
<li>the more complex the database(s) gets (big banks, hospitals, large corporations, etc.), the harder it is to translate code to SQL commands when data for one object spans over multiple tables across multiple linked databases</li>
<li>these large and complex databases need to be optimized for other aspects (for example, analytics) than just simple traversing</li>
</ul></li>
<li>See the image below (Courtesy: Tealeaf Academy) to get the basic idea of the implementation of ActiveRecord in Rails
<img src="http://d3ncao0pifc37i.cloudfront.net/images/ar_db_connection.jpg" alt="ActiveRecord in Rails" title="ActiveRecord in Rails"></li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='mig'></a></p>

<h3 class='no_extra_new_line'>Migrations</h3>

<ul>
<li>Migrations are modifications done to the database schema (additions, deletions, modifications of or to the individual tables in the database)</li>
<li>Migrations should be created using the <code>rails generate migrations new_migration_name</code> task (this is the only worthwhile use of the <code>rails generate</code> task)

<ul>
<li>the created migration file (Ruby) could be then modified manually to fine-tune the changes to be made to the schema </li>
</ul></li>
<li>Migrations should be effected using the <code>rake db:migrate</code> rake task

<ul>
<li>this will modify the schema.rb file to record the changes made to the schema (this file should be checked into the version control system)</li>
<li>this task will also make the implement the changes in the db (which is not checked in to the repository)</li>
</ul></li>
<li>see the <a href="http://guides.rubyonrails.org/migrations.html">Migrations documentation</a> for details</li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='assoc'></a></p>

<h3 class='no_extra_new_line'>Associations</h3>

<ul>
<li>1-to-Many (1:M) associations between two Models (each table in the db represents an ActiveRecord Model) can be set up using the foreign-key attribute</li>
<li>The model class for each entity needs to have the appropriate command that Rails provides to set up this association correctly (See the image below as an example - Courtesy: Tealeaf Academy)
<img src="http://d3ncao0pifc37i.cloudfront.net/images/1-M_association.png" alt="1:M Association Setup" title="1:M Association Setup"></li>
<li>Many-to-Many (M:M) associations are essentially two 1:M associations set up <strong>through</strong> an intermediary table, called the join-table</li>
<li>the preferred way to set up a M:M association is using a <code>has_many, through:</code> (hmt) method (see the diagram below - Courtesy: Tealeaf Academy)
<img src="http://d3ncao0pifc37i.cloudfront.net/images/M-M_association.png" alt="M:M Association Setup" title="M:M Association Setup"></li>
<li>the &#39;hmt&#39; method lets us have the join-table as an ActiveRecord Model, which means it can have additional attributes (like created_at if we want to keep track of how long the association exists between the two objects of the end models)</li>
<li>the non-preferred way to set up a M:M is with a <code>has_and_belongs_to_many</code> method</li>
<li>the &#39;habtm&#39; way needs a join-table too but does not give us a join-model, which limits the way we can use the join-table</li>
<li>see the <a href="http://guides.rubyonrails.org/association_basics.html">Associations Basics documentation</a> for details</li>
</ul>

<p><a href="#top">Top</a></p>

<p><a name='res'></a></p>

<h3 class='no_extra_new_line'>Resources</h3>

<ul>
<li>The routes.rb file defines all the routes the web application can take</li>
<li>Individual routes can be added to this file using the syntax <code>HTTP_METHOD &#39;/route&#39;, to: &#39;controller#action&#39;</code>

<ul>
<li><code>get &#39;/posts&#39;, to: &#39;posts#index&#39;</code> will set a route for a GET request to the /posts path to be handled by the Posts controller&#39;s <code>index</code> action</li>
</ul></li>
<li><div>The most common routes required for a controller named, say Posts, can be added by a single line of code in the routes.rb file</div>

<ul>
<li>just having <code>resources :posts</code> in the block in the routes.rb file is going to give the following routes</li>
</ul>

<table><thead>
<tr>
<th>Prefix</th>
<th>Verb</th>
<th>URI Pattern</th>
<th>Controller#Action</th>
</tr>
</thead><tbody>
<tr>
<td>posts</td>
<td>GET</td>
<td>/posts(.:format)</td>
<td>posts#index</td>
</tr>
<tr>
<td></td>
<td>POST</td>
<td>/posts(.:format)</td>
<td>posts#create</td>
</tr>
<tr>
<td>new_post</td>
<td>GET</td>
<td>/posts/new(.:format)</td>
<td>posts#new</td>
</tr>
<tr>
<td>edit_post</td>
<td>GET</td>
<td>/posts/:id/edit(.:format)</td>
<td>posts#edit</td>
</tr>
<tr>
<td>post</td>
<td>GET</td>
<td>/posts/:id(.:format)</td>
<td>posts#show</td>
</tr>
<tr>
<td></td>
<td>PATCH</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>PUT</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>DELETE</td>
<td>/posts/:id(.:format)</td>
<td>posts#destroy</td>
</tr>
</tbody></table></li>
<li><div>This can be customized by using the <code>except:</code> or <code>only:</code> options</div>

<ul>
<li><code>resources :posts, except: :destroy</code> would set all routes except the DELETE (last one in the list above)</li>
<li><code>resources :posts, only: [:index, :new, :create]</code> will set routes only for the first three actions in the list above</li>
</ul></li>
<li><p>See this <a href="http://guides.rubyonrails.org/routing.html">Rails Routing Guide page</a> for details</p></li>
</ul>

<!--
<div id="disqus_thread"></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'ppjgithubio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
&#8211;>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quiz for Rails Beginners - 1]]></title>
    <link href="http://ppj.github.io/blog/2014/09/24/quiz-for-rails-beginners-1/"/>
    <updated>2014-09-24T11:56:38+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/24/quiz-for-rails-beginners-1</id>
    <content type="html"><![CDATA[<p>Here&#39;s a quiz for people who are just getting started learning web-application development. Most questions are specific to Rails, others are generic. Each question is a link pointing to my corresponding answer as i understand the concepts the today.</p>

<!-- more -->

<ol>
<li><p><a name='q1'></a><a href="#a1">Why do they call it a relational database?</a></p></li>
<li><p><a name='q2'></a><a href="#a2">What is SQL?</a></p></li>
<li><p><a name='q3'></a><a href="#a3">There are two predominant views into a relational database. What are they, and how are they different?</a></p></li>
<li><p><a name='q4'></a><a href="#a4">In a table, what do we call the column that serves as the main identifier for a row of data? We&#39;re looking for the general database term, not the column name.</a></p></li>
<li><p><a name='q5'></a><a href="#a5">What is a foreign key, and how is it used?</a></p></li>
<li><p><a name='q6'></a><a href="#a6">At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.</a></p></li>
<li><p><a name='q7'></a><a href="#a7">If there&#39;s an ActiveRecord model called &quot;CrazyMonkey&quot;, what should the table name be?</a></p></li>
<li><p><a name='q8'></a><a href="#a8">If I&#39;m building a 1:M association between Project and Issue, what will the model associations and foreign key be?</a></p></li>
<li><p><a name='q9'></a><div class='no_extra_line'>Given this code</div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">class</span> <span class="nc">Zoo</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:animals</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><a href="#a9">What do you expect the other model to be and what does database schema look like?</a></li>
<li><a href="#a9.2">What are the methods that are now available to a zoo to call related to animals?</a></li>
<li><a href="#a9.3">How do I create an animal called &quot;jumpster&quot; in a zoo called &quot;San Diego Zoo&quot;?</a>
<br/><br/></li>
</ul></li>
<li><p><a name='q10'></a><a href="#a10">What is mass assignment? What&#39;s the non-mass assignment way of setting values?</a></p></li>
<li><p><a name='q11'></a><a href="#a11">What does this code do?</a> <code>Animal.first</code></p></li>
<li><p><a name='q12'></a><a href="#a12">If I have a table called &quot;animals&quot; with columns called &quot;name&quot;, and a model called Animal, how do I instantiate an animal object with name set to &quot;Joe&quot;. Which methods makes sure it saves to the database?</a></p></li>
<li><p><a name='q13'></a><a href="#a13">How does a M:M association work at the database level?</a></p></li>
<li><p><a name='q14'></a><a href="#a14">What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?</a></p></li>
<li><p><a name='q15'></a><a href="#a15">Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?</a></p></li>
</ol>

<h3 id="my-answers:">MY ANSWERS:</h3>

<p><a name='a1'></a>
<strong>A1</strong>: The way data is represented in tuples (ordered list or array) of attribute-values that are grouped in a <a href="http://en.wikipedia.org/wiki/Relation_(database)">relation</a> (tuple with attribute/title/header) makes this database a relational database. <a href="http://en.wikipedia.org/wiki/Relational_model">Source</a><br>
<a href="#q1">Back</a></p>

<p><a name='a2'></a>
<strong>A2</strong>: Structured Query Language is a language to create, read, update, and destroy information in a Relational Database.<br>
<a href="#q2">Back</a></p>

<p><a name='a3'></a>
<div><strong>A3</strong>:</div>
<ul><li> The <strong>schema view</strong> shows what columns are in a table and what type of data (string/integer/boolean/&#8230;) each columns can store</li>
<li> The <strong>data view</strong> shows the actual table with the data that is currently stored in it (like a spreadsheet view)</li></ul>
<a href="#q3">Back</a></p>

<p><a name='a4'></a>
<strong>A4</strong>: Primary Key<br>
<a href="#q4">Back</a></p>

<p><a name='a5'></a>
<strong>A5</strong>: Foreign key is an index stored in one table that refers to the row index (primary key) of another table.<br>
<a href="#q5">Back</a></p>

<p><a name='a6'></a>
<strong>A6</strong>: Active Record pattern is an approach to accessing data in a database. Typical operations it helps perform on the database are inserting, updating and deleting data. <a href="http://www.martinfowler.com/eaaCatalog/activeRecord.html">Reference</a><br>
<a href="#q6">Back</a></p>

<p><a name='a7'></a>
<strong>A7</strong>: crazy_monkeys<br>
<a href="#q7">Back</a></p>

<p><a name='a8'></a>
<strong>A8</strong>:
<figure class='code'><figcaption><span>Project Model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">class</span> <span class="nc">Project</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:issues</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Issue Model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">class</span> <span class="nc">Issue</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:project</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Foreign Key: <code>project_id</code></p>

<p><a href="#q8">Back</a></p>

<p><a name='a9'></a>
<div><strong>A9</strong>:</div></p>

<p><strong>The Animal Model and Schemas</strong>
<figure class='code'><figcaption><span>Animal Model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:zoo</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>The Zoo table schema:</div>

<ul>
<li><code>id</code> (integer, primary_key, unique)</li>
<li><code>name</code> (string)</li>
</ul>

<div>The Animal table schema:</div>

<ul>
<li><code>id</code> (integer, primary_key, unique)</li>
<li><code>name</code>/<code>species</code> (string)</li>
<li><code>zoo_id</code> (integer, foreign_key)</li>
</ul>

<p><a name='a9.2'></a></p>

<div><strong>Methods available to a &#8216;zoo&#8217; object to call related to animals</strong>:</div>  

<ul>
<li><code>animals</code></li>
<li><code>animals &lt;&lt; animal_object</code></li>
<li><code>animals.delete(object, ...)</code></li>
<li><code>animals.destroy(object, ...)</code></li>
<li><code>animals=animal_objects</code></li>
<li><code>animal_ids</code></li>
<li><code>animal_ids=ids</code></li>
<li><code>animals.clear</code></li>
<li><code>animals.empty?</code></li>
<li><code>animals.size</code></li>
<li><code>animals.find(...)</code></li>
<li><code>animals.where(...)</code></li>
<li><code>animals.exists?(...)</code></li>
<li><code>animals.build(attributes = {}, ...)</code></li>
<li><code>animals.create(attributes = {})</code></li>
<li><code>animals.create!(attributes = {})</code></li>
</ul>

<p><a name='a9.3'></a></p>

<div><strong>To create an animal called &#8220;jumpster&#8221; in a zoo called &#8220;San Diego Zoo&#8221;</strong>:</div>  

<figure class='code'><figcaption><span>Rails Console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">zoo</span><span class="o">=</span><span class="no">Zoo</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;San Diego Zoo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">zoo</span><span class="o">.</span><span class="n">animals</span> <span class="o">&lt;&lt;</span> <span class="no">Animal</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;jumpster&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="#q9">Back</a></p>

<p><a name='a10'></a>
<div><strong>A10</strong>:</div>
<ul><li> Mass assignment - <code>Animal.create(name: &#39;tiger&#39;, zoo_id: &#39;3&#39;)</code></li>
<li> Non-mass assignment -
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Animal</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;tiger&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">zoo_id</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></li></ul>
<a href="#q10">Back</a></p>

<p><a name='a11'></a>
<strong>A11</strong>: It will fetch the first defined object (row) in the <code>animals</code> table in the database<br>
<a href="#q11">Back</a></p>

<p><a name='a12'></a>
<div><strong>A12</strong>:</div>
<ul><li> <code>Animal.create(name: &#39;Joe&#39;)</code></li>
<li> <code>Animal.create!(name: &#39;Joe&#39;)</code></li></ul>
<a href="#q12">Back</a></p>

<p><a name='a13'></a>
<strong>A13</strong>: It works through a join table which has attributes to store foreign keys (IDs) of the two tables it joins.<br>
<a href="#q13">Back</a></p>

<p><a name='a14'></a>
<div><strong>A14</strong>:</div>
<ul><li> <code>has_many, :through</code> (hmt)
  <ul><li> Pro: Join medium is a model (can have additional attributes)</li></ul></li>
<li> <code>has_and_belongs_to_many</code> (habtm)
  <ul><li> Con: Only Join-Table, no Join-Model so cannot have custom attributes (as against the &#39;Pro&#39; for &#39;hmt&#39; type association)</li></ul></li></ul>
<a href="#q14">Back</a></p>

<p><a name='a15'></a>
<div><strong>A15</strong>:</div>
<figure class='code'><figcaption><span>Rails Console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">user</span>  <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="no">Group</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">group</span> <span class="o">&lt;&lt;</span> <span class="n">group</span>
</span></code></pre></td></tr></table></div></figure>
<a href="#q15">Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails References]]></title>
    <link href="http://ppj.github.io/blog/2014/09/16/rails-references/"/>
    <updated>2014-09-16T10:15:46+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/16/rails-references</id>
    <content type="html"><![CDATA[<p>I just started the <a href="http://www.gotealeaf.com/curriculum#!rails">second</a> of the 3 <a href="http://www.gotealeaf.com/">TeaLeaf</a> courses for back-end web-application development using Ruby on Rails.</p>

<!-- more -->

<p>The last exercise in Course 1 was an introduction to web-app development in Ruby using the Sinatra framework. Rails, as I understand so far, is a much more intense framework as compared to Sinatra. So, it has a much steeper learning curve. All the more true, for a web-app newbie.</p>

<p>Listed below are some of the key notes i made as i went through the precourse material and attempted the exercises.</p>

<h3 class='no_extra_new_line'>Major Takeaways:</h3>

<ul>
<li>The first few things to look at in a pre-existing Rails app&#39;s code

<ul>
<li>.README.markdown</li>
<li>./Gemfile: Gives an idea of the complexity of the app based on the variety of gems it depends on</li>
<li>./config/routes.rb: Has code to generate various routes the app has</li>
<li>use <code>rake routes</code> or <APP_HOMEPAGE>\rails\info route to list various routes</li>
<li>./config/database.yml: database related info </li>
</ul></li>
<li>Rails has a lot of &quot;magic&quot; going on in the background owing mainly to its conventions (expectations and auto creation of files &amp; code based on a single line of code / shell command)</li>
<li>For the same reason, lot of hands-on practice would be needed to get used to all (or most) things going on in rails, ranging from folder &amp; file structure to more advanced features</li>
<li><code>rails generate ...</code> should be used sparingly as it can be confusing and/or redundant (generates lot of unnecessary files/code)</li>
<li>no data from the database is actually pushed to Git (.gitignore file is set to ignore the default db&#39;s &#39;.sqlite3&#39; files for git operations)

<ul>
<li>the migration file and schema.rb which is modified by the <code>rake db:migrate</code> command is what goes into the repository</li>
</ul></li>
</ul>

<h3 class='no_extra_new_line'>Learning Resources:</h3>

<ol>
<li><div><a href='http://guides.rubyonrails.org/getting_started.html'>The getting started guide</a>: This is pretty good as a first-time Rails tutorial&#8230; i just powered through as many questions were raised following the steps listed! The page has links to more detailed descriptions of the concepts; some important ones are:</div>

<ul>
<li><a href="http://guides.rubyonrails.org/migrations.html">Rails Database Migrations</a></li>
<li><a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Layouts And Rendering In Rails</a></li>
<li><a href="http://guides.rubyonrails.org/association_basics.html">Active Record Associations</a></li>
</ul></li>
<li><a href="https://www.railstutorial.org/book">The Rails Tutorial (Book)</a>: This looks like a good comprehensive tutorial and i plan to use it to refresh my Rails knowledge a while after i finish the course!</li>
</ol>

<h3 class='no_extra_new_line'>Related Repos:</h3>

<ul>
<li><a href="https://github.com/ppj/railsBlog">Rails Blog</a></li>
<li><a href="https://github.com/ppj/railsAssociationsTrial">Rails 1-Many and Many-Many Association Trials</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing Web-based BlackJack]]></title>
    <link href="http://ppj.github.io/blog/2014/09/04/developing-web-based-blackjack/"/>
    <updated>2014-09-04T12:24:46+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/04/developing-web-based-blackjack</id>
    <content type="html"><![CDATA[<p>So, i am finally done developing the web-version of the BlackJack game! Like i mentioned in the previous post, it was suggested in the TeaLeaf course to use procedural programming to keep it simple and focused on web application development learning!</p>

<!-- more -->

<p>Quoted below are the reasons for two major simplifications adopted in this first web-app development exercise -</p>

<div><strong>Why procedural programming instead of OOP</strong>:</div>

<blockquote>
<p>We chose to not use OOP to manage our code. We&#39;ve seen that many people get stuck on OOP and can&#39;t move forward, and we want people to focus on web development and primary, HTTP in this lesson.  </p>
</blockquote>

<div><strong>Why simpler session-based persistence (cookies) instead of databases:</strong></div>

<blockquote>
<p>We chose to not include databases in this section, and instead chose to use the session, which is cookie-backed, for cheap persistence. Again, the reason is because many people get stuck on database concepts, which are important, but we want to direct focus on dealing with HTTP.  </p>
</blockquote>

<p>Relational database will be introduced and used in the subsequent TeaLeaf courses.</p>

<h3 class='no_extra_new_line'>Sinatra Files/Folder Structure for <a href="https://github.com/ppj/blackjack_web"><em>My</em> App</a>:</h3>

<ul>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/main.rb"><em>main.rb</em></a>: the main Ruby file with handlers for the HTTP requests</li>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/config.ru"><em>config.ru</em></a>: Sinatra settings and launcher file

<ul>
<li>use <code>rackup -p ABCD</code> to initiate a local WeBrick server @ port <em>ABCD</em> (defaults to 9292)<br></li>
</ul></li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public"><strong>public</strong></a>

<ul>
<li>stores <a href="https://github.com/ppj/blackjack_web/blob/master/public/application.js">custom JavaScript</a> and <a href="https://github.com/ppj/blackjack_web/blob/master/public/application.css">CSS</a> <em>files</em> </li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public/images"><strong>images</strong></a>: stores the image files used in the app</li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/public/vendor"><strong>vendor</strong></a>: can store third party &#39;plugins&#39;, like Twitter-Bootstrap files<br></li>
</ul></li>
<li><a href="https://github.com/ppj/blackjack_web/tree/master/views"><strong>views</strong></a>

<ul>
<li><a href="https://github.com/ppj/blackjack_web/blob/master/views/layout.erb"><em>layout.erb</em></a>: default (but customizable) erb layout to encompass the other erb templates in</li>
<li>other erb templates (use <code>, :layout false</code> while rendering to avoid embedding these in the <em>layout.erb</em>)</li>
</ul></li>
</ul>

<h3 class='no_extra_new_line'>Thumb Rules Followed:</h3>

<ul>
<li><code>/GET</code> requests generally render &#39;.erb&#39; (<strong>E</strong>mbedded <strong>R</strong>u<strong>b</strong>y HTML templates)</li>
<li><code>/POST</code> requests generally <code>redirect</code> to another request (typically a <code>\GET</code> request handler)</li>
</ul>

<h3 class='no_extra_new_line'>Salient Features:</h3>

<ul>
<li>Empty string or blank spaces not allowed as player name</li>
<li>Initial chip-count or bet cannot be empty/blank, non-numeric, or &gt; remaining chips</li>
<li>Auto adjusts bet amount if set &gt; remaining chips and warns player accordingly</li>
<li>Using the <code>session</code> hash the app remembers the following:

<ul>
<li>last player&#39;s name</li>
<li>previous bet amount</li>
</ul></li>
<li>Tracks and displays chip-count on the round, and betting pages</li>
<li>Player wins - message in green</li>
<li>Player loses - message in red</li>
<li>Game pushes (ties) - message in blue</li>
<li>&quot;AJAXified&quot; the Hit, Stay and Dealer Next Card buttons - avoids reloading the entire page</li>
</ul>

<h3 class='no_extra_new_line'>Key Takeaways:</h3>

<ul>
<li>the difference between client side vs server side code</li>
<li>what the DOM means and how to use jQuery to manipulate it</li>
<li>unobtrusive JavaScript, and AJAX: when, and how, to use them</li>
<li>dealing with re-binding issues when the DOM changes (the green highlighted lines are preferred over the red highlighted ones in the AJAX code below)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$(document).ready(function() {
</span><span class='line'>
</span><span class='line'><span class="gd">- $(&#39;#hit_form input&#39;).click(function() {</span>
</span><span class='line'><span class="gi">+ $(document).on(&#39;click&#39;, &#39;#hit_form input&#39;, function() {</span>
</span><span class='line'>
</span><span class='line'>    $.ajax({
</span><span class='line'>      type: &#39;POST&#39;,
</span><span class='line'>      url: &#39;/round/player/hit&#39;
</span><span class='line'>    }).done(function(msg) {
</span><span class='line'>
</span><span class='line'><span class="gd">-     $(&#39;#game_area&#39;).html(msg);</span>
</span><span class='line'><span class="gi">+     $(&#39;#game_area&#39;).replaceWith(msg);</span>
</span><span class='line'>
</span><span class='line'>    });
</span><span class='line'>    // prevent from further execution of the route
</span><span class='line'>    return false; // or event.preventDefault();
</span><span class='line'>  });
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure></li>
</ul>

<h3 class='no_extra_new_line'>Other Notes:</h3>

<ul>
<li>The equivalent of ShotGun gem for Windows is the Sinatra/Reloader gem. Both enable on the fly changes to the code; i.e. the local server instance need not be restarted to see the changes made to the code, a simple page refresh is enough once the changes are saved.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">RUBY_PLATFORM</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;w32&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;sinatra/reloader&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Look at Basics of Web Development]]></title>
    <link href="http://ppj.github.io/blog/2014/09/03/my-first-look-at-basics-of-web-development/"/>
    <updated>2014-09-03T14:40:34+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/03/my-first-look-at-basics-of-web-development</id>
    <content type="html"><![CDATA[<p>This calls for a brief pause from learning/practicing OOP. The focus of this exercise is getting to know the underlying concepts of how the web works.</p>

<!-- more -->

<div>Below are links to decent tutorials/articles about the same:</div>

<ul>
<li><a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">HTTP</a></li>
<li><a href="http://www.codecademy.com/tracks/htmlcss">HTML &amp; CSS</a></li>
<li><a href="http://www.sinatrarb.com/intro.html">Sinatra</a></li>
<li><a href="http://d1b1wr57ag5rdp.cloudfront.net/web_solutions/sinatra_mvc_request_response.pdf">Request/Response MVC</a></li>
</ul>

<div>At the end of this exercise, I should have a fair idea about&#8230;</div>

<ul>
<li>how the web server handles the requests from the client (typically, a web browser)</li>
<li>how the web server issues responses back to the client</li>
<li>how to simulate a &#39;stateful&#39; experience using a stateless protocol using browser cookies<br>
The more traditional way is to use a database, but that is a bigger topic which is why it should be avoided for now.</li>
</ul>

<p>Once i familiarize myself with the above, i should put the knowledge to use by developing a web-version of &#8230;<br>
&#8230;&#8230; drum-roll &#8230;..<br>
yes &#8230;&#8230; the BlackJack game!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My (Failed) Initial Experiments With TDD]]></title>
    <link href="http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd/"/>
    <updated>2014-09-03T12:10:14+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/03/my-failed-initial-experiments-with-tdd</id>
    <content type="html"><![CDATA[<p>My better-half is a software developer with a rich experience of 10+ years. She absolutely swears by Test Driven Development (TDD). And seems to have all the right reasons for preaching it, as far as my limited knowledge goes. I read up a bit about it and watched a few screen casts too.</p>

<!-- more -->

<p>So when i was to start developing the object oriented console-based BlackJack game, i thought i&#39;d give it a shot. After all this was technically my 2nd go at developing an OO application (the TicTacToe game was the first)!</p>

<p>I installed the rspec gem, enabled color display for my PowerShell (yes i use Windows!) to actually <em>feel</em> the <em>red-green</em>-refactor cycle! I was all set. Or so i thought. I started with writing the tests for the most fundamental of the classes my problem statement gave me, the Card class. I had read that TDD is much more than writing tests first. Primarily, it should lead to evolvution your application design, and that, adhering to the SOLID principles of object oriented design. And that&#39;s where the problems began.</p>

<p>I had also read the theory about the five Object Oriented Design Principles (SOLID). Also, how it can (is supposed to) ensure low-coupling and high-cohesion between classes. This is where my inexperience in OOP started showing up. </p>

<p>I forced myself to move from the Card class to the Deck class. I continued using TDD to develop it. But i just could not use TDD to continue to develop the app! I could not see how TDD would help me take the program further! I even asked my wife to show me how she would do it (for a couple of sessions at least). That didn&#39;t help much either.</p>

<p>Finally after much frustration, arguments and some more reading up i decided not to muddle my learning with TDD <em>for now</em>.</p>

<p>One article that helped me reach this conclusion: <a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html"><strong>The Failures of &quot;Intro to TDD&quot;</strong></a>. Especially the introduction and the last two sections.</p>

<p>Also, my course instructor at TeaLeaf helped me understand the reasons of not using TDD at an early stage of learning OOP&#8230; which are what i have talked about above. I will not experiment much with it before i start the third course which talks in depth about the SOLID principles. Moreover, it is expected to be completed using TDD through-out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Object Oriented Application(s): Console Based Black Jack]]></title>
    <link href="http://ppj.github.io/blog/2014/09/01/my-first-object-oriented-application-s-console-based-black-jack/"/>
    <updated>2014-09-01T13:36:33+10:00</updated>
    <id>http://ppj.github.io/blog/2014/09/01/my-first-object-oriented-application-s-console-based-black-jack</id>
    <content type="html"><![CDATA[<p>Before i developed the console-based Black Jack, i tried developing a slightly simpler game, also console based: Tic-Tac-Toe. Here are the problem statements for both the apps:</p>

<!-- more -->

<h2 id="problem-statement-for-tic-tac-toe:">Problem Statement for Tic-Tac-Toe:</h2>

<p>On an empty board of 3x3 squares, a player and the computer (or another player) pick empty squares to put their <code>X</code> or <code>O</code> (symbols) in. The first one to have their symbols in a row (or column or diagonal) of 3 wins.</p>

<h3 class='no_extra_new_line'>Extracted Nouns:</h3>

<ul>
<li>Board</li>
<li>Square (or Position)</li>
<li>Player (this would also address the other player/computer?)</li>
<li>Game (that would be the engine)</li>
</ul>

<p>Note: The Tic-Tac-Toe code can be a perfect foundation for a &quot;connect-4&quot; game!
  &#8230; or even a &#39;expandable&#39; version of Tic-Tac-Toe (4x4, 5x5, etc.)!!</p>

<h2 id="problem-statement-for-blackjack:">Problem Statement for BlackJack:</h2>

<p>BlackJack is a card game played between a dealer and player(s). The dealer starts out with dealing 2 cards from a deck to each player. A player wins if he/she hits a BlackJack (score of 21), unless the dealer has also hit a BlackJack. If neither have hit a BlackJack, player can choose to hit (get dealt another card) till he/she decides to stop/stay, scores 21, or loses (scores more than 21). If the player decides to stay (i.e. &lt; 21), next player chooses to hit or stay. If no player hits a BlackJack, dealer can choose to hit (draw one card at a time) till he/she loses (&gt;21), reaches 17, or wins (hits BlackJack). If dealer reaches anywhere between (&gt;=) 17 and (&lt;) 21, the highest scorer wins.</p>

<h3 id="class-design:">Class Design:</h3>

<table><thead>
<tr>
<th>Nouns</th>
<th>Properties</th>
<th>Behaviours</th>
</tr>
</thead><tbody>
<tr>
<td>BlackJack</td>
<td>dealer, Player, Deck</td>
<td>check_winner? game-sequence</td>
</tr>
<tr>
<td>Deck</td>
<td>cards</td>
<td>pop_out_card (to be dealt/drawn), shuffle_cards</td>
</tr>
<tr>
<td>Card</td>
<td>suit, denomination</td>
<td>value</td>
</tr>
<tr>
<td>Dealer</td>
<td>hand(of cards)</td>
<td>deal_card (or/and draw_card to self), hit, stay</td>
</tr>
<tr>
<td>Player</td>
<td>hand(of cards)</td>
<td>hit, stay</td>
</tr>
<tr>
<td>Hand</td>
<td>cards, total</td>
<td>calculate_total, busted?, display</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Before Developing My First Object Oriented Application: Notes to Self]]></title>
    <link href="http://ppj.github.io/blog/2014/08/19/before_developing-my-first-object-oriented-application-notes-to-self/"/>
    <updated>2014-08-19T13:23:18+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/19/before_developing-my-first-object-oriented-application-notes-to-self</id>
    <content type="html"><![CDATA[<p>These are generic notes made when i learnt the basics of Object Oriented programming using Ruby.</p>

<!-- more -->

<ul>
<li>Modules can reference public instance methods of the class, for e.g.</li>
</ul>

<figure class='code'><figcaption><span>Modules Referencing Instance Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Walkable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> is walking&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span> <span class="no">Dog</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Walkable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>The above will work ONLY if the class that implements the module Walkable has a public method <code>name</code> (which is a getter in this case).
<em>It is a good practice to put a comment to that effect where the module is defined.</em></p>

<ul>
<li><p>Only two things evaluate to the boolean <code>false</code> in Ruby, they are a null object <code>nil</code> and <code>false</code></p></li>
<li><p>Every expression returns something in Ruby.
The return value is shown after an hash-rocket sign <code>=&gt;</code> in an IRB session after executing a
line of code.</p></li>
<li><p>It&#39;s a good idea to just return a string from a method and then using <code>puts</code> on the method call to display the desired string rather than doing a <code>puts</code> in the method itself.</p></li>
</ul>

<ul>
 <li><a href='http://www.skorks.com/2009/09/ruby-exceptions-and-exception-handling'>Exceptions in Ruby</a></li>
 <ul>
 <li><a href='http://stackoverflow.com/questions/1485114/ruby-constructors-and-exceptions'>Raising exceptions during object instansiation</a></li>
 </ul>
</ul>

<ul>
<li>A good way to start developing/design an OO application is following the steps below:

<ol>
<li>Write the problem statement for the application</li>
<li>Extract nouns from the problem statement: can be good indicators for required classes</li>
<li>Extract verbs and associate them with the nouns: can be good indicators of required methods and responsibilities</li>
</ol></li>
</ul>

<p>Note: The above method was put to use <a href="http://ppj.github.io/blog/2014/09/01/my-first-object-oriented-application-s-console-based-black-jack/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Writing a (Procedural) Program]]></title>
    <link href="http://ppj.github.io/blog/2014/08/18/how-to-start-writing-a-procedural-program/"/>
    <updated>2014-08-18T13:13:27+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/18/how-to-start-writing-a-procedural-program</id>
    <content type="html"><![CDATA[<p>I have starter trouble&#8230; always. I either spend way too much time &#39;planning&#39; and &#39;collecting information&#39; when i want to start something new, or, the other extreme (but less often), just dive right into it and then suffer due to under preparation.</p>

<!-- more -->

<p>The fundamental technique i learnt during the first course in the first <a href="http://www.gotealeaf.com/">TeaLeaf</a> course on Ruby basics was how to start writing a program. In other words, how much preparation is just enough to start writing a procedural program.</p>

<p>A quick side-note: Although, procedural programming is (almost) a thing of the past, and all for the right reasons, it is still a great way to start learning programming IMO. The primary reason, i believe, is our brains are wired to think sequentially or serially: first do this, then get the result, then do that&#8230; and so on. At least mine is.</p>

<p>So to get over that starting trouble, the technique to start writing a program that best helped me is writing psuedo-code. &quot;Pseudo&quot; as in made up syntax, not bother about whether it will run, because it will not! The psuedo-code is almost plain English, or very close to it. Just enough to guide you in writing the actual code.</p>

<p>Just jot down the logical steps (loops, conditionals, operations) you think are required to solve the programming problem. One rule i stuck to when doing this exercise is: use consistent indentation for readability.</p>

<p>As an example, this is the psuedo code i wrote for a console-based player-vs-computer Tic-Tac-Toe game:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Start with an empty 3x3 board
</span><span class='line'>until board full or winner
</span><span class='line'>  ask player to chose empty square to mark his/her 'X'
</span><span class='line'>  display board
</span><span class='line'>  if player won?
</span><span class='line'>    announce winner and end game
</span><span class='line'>  else if board full?
</span><span class='line'>    end game
</span><span class='line'>  else
</span><span class='line'>    generate a random number and let the computer choose an empty square to mark its 'O'
</span><span class='line'>  end
</span><span class='line'>  display board
</span><span class='line'>  if computer won
</span><span class='line'>    announce winner and end game
</span><span class='line'>  elsif board full?
</span><span class='line'>    end game
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

<div>Some features of this technique are:</div>

<ul>
<li>it highlights my logic of developing a solution</li>
<li>it helps to keep focus on the current coding task</li>
<li>it helps to bring focus back to the next coding task if the previous one took longer than normal for whatever reasons (new language, syntactical errors)</li>
<li>it need not be perfect (or updated all the time for small changes in the actual implementation)</li>
<li>The final Ruby code for this simple application (if it can be called that!) can be found <a href="https://github.com/ppj/tealeaf1_Lesson1/blob/master/tic_tac_toe.rb">here</a> </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Ruby Code With the Pry Gem]]></title>
    <link href="http://ppj.github.io/blog/2014/08/11/debugging-ruby-code-with-the-pry-gem/"/>
    <updated>2014-08-11T09:49:00+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/11/debugging-ruby-code-with-the-pry-gem</id>
    <content type="html"><![CDATA[<p>This is a quick reference guide for using ‘pry’ gem for debugging Ruby code.</p>

<!-- more -->

<h3 class='no_extra_new_line'>Installation:</h3>

<ul>
<li><code>gem list pry</code>: lists whether it is already installed<br></li>
<li><code>gem install pry</code>: installs the pry gem</li>
</ul>

<h3 class='no_extra_new_line'>Use:</h3>

<ol>
<li><code>require &#39;pry&#39;</code>

<ul>
<li>insert the above line at the top of the ruby file you intend to debug</li>
</ul></li>
<li><code>binding.pry</code>

<ul>
<li>insert the above line to stop execution at a particular point in the code</li>
<li>insert this after the line where you want to pause the program execution</li>
</ul></li>
<li>run the program

<ul>
<li>type the debugging stuff (variable names, method names etc.) once the program pauses</li>
</ul></li>
<li><code>step</code>

<ul>
<li>type ‘step’ to go to the next line</li>
</ul></li>
<li>Ctrl+D

<ul>
<li>use the above key combo to move to the next ‘binding.pry’ statement in the program</li>
</ul></li>
</ol>

<p><a href="http://knomedia.github.io/blog/2013/01/21/debugging-ruby-with-pry">Here’s a good screen cast</a> describing the debugging features of Pry.</p>

<p>However, debugging is just one of the many things that can be done using Pry. One other main feature is replacing IRB. A good reference page (with screen-casts and all) can be found <a href="http://pryrepl.org/">here</a>.</p>

<h3 class='no_extra_new_line'>Other useful links:</h3>

<ul>
<li><a href="https://rubygems.org/gems/pry-doc">Latest Pry &amp; Documentation</a></li>
<li><a href="https://github.com/pry/pry/wiki">Pry WiKi on GitHub</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Post!]]></title>
    <link href="http://ppj.github.io/blog/2014/08/10/my-first-blog-post/"/>
    <updated>2014-08-10T18:24:06+10:00</updated>
    <id>http://ppj.github.io/blog/2014/08/10/my-first-blog-post</id>
    <content type="html"><![CDATA[<p>As the title suggests&#8230;</p>

<!-- more -->

<p>Some would say i am too late to jump on the bandwagon. In my defense, i am lazy!</p>

<p>What made me start writing a blog is this Ruby (and Rails) programming course series from <a href="http://www.gotealeaf.com/">TeaLeaf</a>. At the time of writing this, I am almost about to finish the first of the three courses.</p>

<p>So, at least to start with, i will be writing mostly about my learnings during the course(s) and related stuff, posting links to websites, screen-casts that i find interesting, and of course, my 2 cents about the related stuff.</p>

<p>As i start out, the primary aim for this blog would be to serve me (and other similarly-abled people) as a reference to the tips/tricks i would be learning and discovering as i progress. Nothing more to that, i guess. But who knows, it might have a bit of digression every once in a while.</p>
]]></content>
  </entry>
  
</feed>
